{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","controller","$scope","onChange","params","renderer","setClearColor","options","colors","background","objects","ground","material","color","setHex","lines","groundLines","getGroundLines","add","scene","object","remove","update","rows","strength","noiseStrength","forEach","points","v","i","r","Math","floor","c","b","abs","dr","dc","drc","index","bands","pow","analyserData","scale","ni","d","vz","noiseMap","z","line","l","geometry","verticesNeedUpdate","THREE","LineBasicMaterial","Object3D","space","length","Geometry","Line","Array","fill","push","map","n","point","Vector3","vertices","updateAnalyser","analyser","getByteFrequencyData","loop","stats","begin","render","end","requestAnimationFrame","controls","camera","addListeners","handleMouseMove","event","mouse","x","clientX","y","clientY","handleMouseDown","handleMouseUp","handleTouchStart","touches","preventDefault","mousePos","pageX","pageY","handleTouchEnd","windowHalfX","windowHalfY","handleTouchMove","onWindowResize","width","window","innerWidth","height","innerHeight","w2","h2","setSize","aspect","updateProjectionMatrix","addEventListener","document","ImprovedNoise","fade","t","lerp","a","grad","hash","h","u","p","noise","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","audioUrl","notes","random","size","data","Uint8Array","perlin","quality","j","audio","gui","fov","ratio","near","far","container","Scene","PerspectiveCamera","position","lookAt","WebGLRenderer","alpha","antialias","shadowMap","enabled","getElementById","appendChild","domElement","Stats","dom","OrbitControls","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","bufferLength","console","log","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","play","GalaxyParameters","this","arms","stops","revolutions","radius","sparse","dispersion","bulge","displayOutline","randomize","__controllers","__min","value","__max","property","updateDisplay","armTheta","PI","modulus","dat","GUI","closed","addColor","GPoint","unit","prototype","toGrid","round","toFixed","grid","sort"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.config(['$httpProvider', function($httpProvider) {\n        // $httpProvider.defaults.withCredentials = true;\n    }]);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.config(['$locationProvider', function($locationProvider) {\n\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\n        $locationProvider.html5Mode(true);\n        $locationProvider.hashPrefix('');\n\n    }]);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.run(['$rootScope', function($rootScope) {\n\n    }]);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.controller('RootCtrl', ['$scope', function($scope) {\n\n        var options = {\n            audioUrl: \"audio/rossini-192.mp3\",\n            colors: {\n                background: 0x111111, // 0xffffff,\n                lines: 0x999999, // 0x888888,\n                notes: 0x444444, // 0xaaaaaa,\n            },\n            bands: 256,\n            rows: 256,\n            space: 10,\n            strength: 60,\n            noiseStrength: 25,\n        };\n\n        options.points = new Array(options.bands * 2).fill(null).map(function() {\n            var r = 1000,\n                d = r * 2;\n            return new THREE.Vector3(-r + Math.random() * d, -r + Math.random() * d, -r + Math.random() * d);\n        });\n        options.noiseMap = getPerlinNoise(options.rows, options.rows);\n\n        var analyser, analyserData, audio;\n\n        var objects = {};\n\n        var stats, gui, scene, camera, controls, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\n\n        // objects\n        var ground, notes, lines;\n\n        function onChange(params) {\n            renderer.setClearColor(options.colors.background, 1);\n            if (objects.ground) {\n                objects.ground.material.color.setHex(options.colors.lines);\n            }\n            if (objects.groundLines) {\n                objects.groundLines.material.color.setHex(options.colors.lines);\n            }\n        }\n\n        function createLights() {\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n            shadow.position.set(200, 200, 200);\n            shadow.castShadow = true;\n            // shadow.shadowDarkness = .2;\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\n            back.position.set(-100, 200, 50);\n            // back.shadowDarkness = .2;\n            back.castShadow = true;\n            scene.add(light);\n            scene.add(shadow);\n            scene.add(back);\n        }\n\n        function createScene() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            ratio = width / height;\n            w2 = width / 2;\n            h2 = height / 2;\n            fov = 60;\n            near = 1;\n            far = 20000;\n            scene = new THREE.Scene();\n            // scene.fog = new THREE.Fog(0xeeeeee, 256, 500);\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n            camera.position.z = 100;\n            camera.position.y = -500;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true\n            });\n            renderer.setSize(width, height);\n            renderer.setClearColor(options.colors.background, 1);\n            renderer.shadowMap.enabled = true;\n            container = document.getElementById('scene');\n            container.appendChild(renderer.domElement);\n\n            stats = new Stats();\n            container.appendChild(stats.dom);\n\n            addListeners();\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\n        }\n\n        function getGround() {\n            var object, geometry, material;\n            material = new THREE.PointsMaterial({\n                color: options.colors.lines,\n                size: 1,\n                sizeAttenuation: false,\n                // vertexColors: THREE.VertexColors,\n            });\n            geometry = new THREE.Geometry();\n            object = new THREE.Points(geometry, material);\n            scene.add(object);\n            var rows = options.rows,\n                space = options.space;\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                return {\n                    x: -(space * rows / 2) + space * c,\n                    y: -(space * rows / 2) + space * r,\n                    z: 0,\n                };\n            });\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var point = points[i];\n                var vertex = new THREE.Vector3();\n                vertex.x = point.x;\n                vertex.y = point.y;\n                vertex.z = point.z;\n                geometry.vertices.push(vertex);\n                // geometry.colors.push(new THREE.Color(0xffcc00));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            object.geometry = geometry;\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    strength = options.strength,\n                    noiseStrength = options.noiseStrength;\n                angular.forEach(geometry.vertices, function(v, i) {\n                    var r = Math.floor(i / rows);\n                    var c = i - r * rows;\n                    var b = Math.abs(c - rows / 2) * 2;\n                    var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                    var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                    var drc = (dr + dc) / 2;\n                    var index = b % options.bands;\n                    var pow = analyserData[index];\n                    var scale = (pow / options.bands) * dr * 2;\n                    // v.x = options.points[i].x + 10 * scale;\n                    // v.y = options.points[i].y + 10 * scale;\n                    var ni = r * rows + ((c + d) % rows);\n                    var vz = (options.noiseMap[ni] / 64 * noiseStrength) * drc + (strength * scale);\n                    v.z += (vz - v.z) / (3 + 3 * (1 - drc));\n                });\n                d++;\n                geometry.verticesNeedUpdate = true;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n        }\n\n        function getGroundLines() {\n            var object, material, lines = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            scene.add(object);\n            var rows = options.rows,\n                space = options.space;\n            while (lines.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var line = new THREE.Line(geometry, material);\n                line.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // line.spline = spline;\n                lines.push(line);\n                object.add(line);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                var point = new THREE.Vector3(-(space * rows / 2) + space * c, -(space * rows / 2) + space * r,\n                    0\n                );\n                lines[c].points[r] = point;\n                lines[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    strength = options.strength,\n                    noiseStrength = options.noiseStrength;\n                angular.forEach(points, function(v, i) {\n                    var r = Math.floor(i / rows);\n                    var c = i - r * rows;\n                    var b = Math.abs(c - rows / 2) * 2;\n                    var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                    var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                    var drc = (dr + dc) / 2;\n                    var index = b % options.bands;\n                    var pow = analyserData[index];\n                    var scale = (pow / options.bands) * dr * 2;\n                    var ni = r * rows + ((c + d) % rows);\n                    var vz = (options.noiseMap[ni] / 64 * noiseStrength) * drc + (strength * scale);\n                    v.z += (vz - v.z) / (3 + 3 * (1 - drc));\n                });\n                angular.forEach(lines, function(line, l) {\n                    // var points = line.points;\n                    // var spline = line.spline;\n                    // spline.getPoints(rows * 2);\n                    // line.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    line.geometry.verticesNeedUpdate = true;\n                });\n                d++;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        function getNotes() {\n            var object, geometry, material;\n            geometry = new THREE.Geometry();\n            /*\n            texture = new THREE.CanvasTexture(sprite());\n            material = new THREE.PointsMaterial({\n                size: 12,\n                map: texture,\n                vertexColors: THREE.VertexColors,\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent: true\n            });\n            */\n            material = new THREE.PointsMaterial({\n                color: options.colors.notes,\n                size: 2,\n                sizeAttenuation: false,\n            });\n            object = new THREE.Points(geometry, material);\n\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n\n            add();\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    var index = i % options.bands;\n                    var pow = analyserData[index];\n                    var scale = (pow / options.bands) * 2;\n                    var p = options.points[i];\n                    var vx = p.x * (1 + scale);\n                    var vy = p.y * (1 + scale);\n                    var vz = p.z * (1 + scale);\n                    v.x += (vx - v.x) / 3;\n                    v.y += (vy - v.y) / 3;\n                    v.z += (vz - v.z) / 3;\n                });\n                geometry.verticesNeedUpdate = true;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n\n        function getLines() {\n            var object, geometry, material;\n\n            geometry = new THREE.Geometry();\n            /*\n            material = new THREE.LineDashedMaterial({\n                color: options.colors.lines,\n                dashSize: 1,\n                gapSize: 0.5,\n            });\n            */\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Line(geometry, material);\n            scene.add(object);\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            function update() {\n\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n\n        function createObjects() {\n            objects.groundLines = getGroundLines();\n            // objects.ground = getGround();\n            // objects.notes = getNotes();\n        }\n\n        function createAnalyser() {\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n            source = null;\n            ctx = new actx();\n            analyser = ctx.createAnalyser();\n            audio = new Audio();\n            audio.src = options.audioUrl;\n            audio.controls = true;\n            audio.addEventListener('canplay', function() {\n                var bufferLength;\n                console.log('audio canplay');\n                source = ctx.createMediaElementSource(audio);\n                source.connect(analyser);\n                source.connect(ctx.destination);\n                analyser.fftSize = options.bands * 2;\n                bufferLength = analyser.frequencyBinCount;\n                console.log('bufferLength', bufferLength);\n                analyserData = new Uint8Array(bufferLength);\n                return analyserData;\n            });\n            return audio.play();\n        }\n\n        function updateAnalyser() {\n            // notes.rotation.z -= 0.0025;\n            // lines.rotation.z -= 0.0025;            \n            if (analyserData) {\n                analyser.getByteFrequencyData(analyserData);\n                objects.groundLines.update();\n                // objects.ground.update();\n                // objects.notes.update();\n            }\n        }\n\n        function loop() {\n            stats.begin();\n            render();\n            stats.end();\n            requestAnimationFrame(loop);\n        }\n\n        function render() {\n            if (controls) {\n                controls.update();\n            }\n            updateAnalyser();\n            renderer.render(scene, camera);\n        }\n\n        function sprite() {\n            var canvas = document.createElement('canvas');\n            canvas.width = 128;\n            canvas.height = 128;\n            var ctx = canvas.getContext('2d');\n            var gradient = ctx.createRadialGradient(\n                canvas.width / 2,\n                canvas.height / 2,\n                0,\n                canvas.width / 2,\n                canvas.height / 2,\n                canvas.width / 2\n            );\n            /*\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\n            ctx.fillStyle = gradient;\n            */\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            return canvas;\n        }\n\n        function bufferGeometry() {\n            var geometry = new THREE.BufferGeometry();\n            // create a simple square shape. We duplicate the top left and bottom right\n            // vertices because each vertex needs to appear once per triangle.\n            var vertices = new Float32Array([-1.0, -1.0, 1.0,\n                1.0, -1.0, 1.0,\n                1.0, 1.0, 1.0,\n                1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0\n            ]);\n            // itemSize = 3 because there are 3 values (components) per vertex\n            geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n        }\n\n\n        createScene();\n        createObjects();\n        // addNotes();\n        createAnalyser();\n        // createLights();\n        // addGui();        \n        loop();\n\n        function addNotes() {\n            // alert('onChange', params);\n            /*\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\n            */\n            var geometry = new THREE.Geometry();\n            // geometry.vertices.splice(0, geometry.vertices.length);\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            notes.geometry = geometry;\n            addSplines(points);\n        }\n\n        function addSplines(points) {\n            points = points.map(function(point) {\n                return new THREE.Vector3(point.x, point.y, point.z);\n            });\n            var spline = new THREE.CatmullRomCurve3(points);\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(5000);\n            // geometry.mergeVertices();\n            // geometry.verticesNeedUpdate = true;\n            // geometry.computeLineDistances();\n            // geometry.lineDistancesNeedUpdate = true;\n            lines.geometry = geometry;\n        }\n\n        var params = function GalaxyParameters() {\n            function GalaxyParameters() {\n                this.arms = 2,\n                    this.stops = 5000,\n                    this.revolutions = 1.7,\n                    this.radius = 400,\n                    this.sparse = 0.4,\n                    this.dispersion = 0.6, // more 0 - less 1\n                    this.bulge = 0.6,\n                    this.displayOutline = false,\n                    this.randomize = function() {\n                        // console.log('gui', gui);\n                        for (var i = 0; i < gui.__controllers.length; i++) {\n                            var c = gui.__controllers[i];\n                            if (c.__min) {\n                                var value = c.__min + (c.__max - c.__min) * Math.random();\n                                // console.log(value, c);\n                                this[c.property] = value;\n                                c.updateDisplay();\n                            }\n                        }\n                        onChange(this);\n                    },\n                    this.armTheta = function() {\n                        return Math.PI * 2 / this.arms;\n                    };\n                this.modulus = function() {\n                    return Math.pow(2, 31);\n                };\n            }\n            return new GalaxyParameters();\n        }();\n\n        function lcg(value, modulus, multiplier, increment) {\n            modulus = modulus || Math.pow(2, 31);\n            multiplier = multiplier || 1103515245;\n            increment = increment || 12345;\n            return (value * multiplier + increment) % modulus;\n        }\n\n        function __onChange(params) {\n            // alert('onChange', data);\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\n            // var geometry = notes.geometry;\n            var geometry = new THREE.Geometry();\n            // geometry.vertices.splice(0, geometry.vertices.length);\n            var points = spiral(params).toArray();\n            for (var i = 0; i < points.length; i++) {\n                var point = points[i];\n                var distance = Math.pow(Math.pow(point.x, 2) + Math.pow(point.y, 2), 0.5);\n                var pow = Math.max(0, ((params.radius * .8) - distance) / (params.radius * .8));\n                pow = (1 - Math.cos(pow * Math.PI)) * params.bulge;\n                // console.log(distance);\n                var vertex = new THREE.Vector3();\n                vertex.x = point.x;\n                vertex.y = point.y;\n                vertex.z = (-dz + (dz * 2) * Math.random()) * pow; // (Math.random() * 180 - 90) * (pow * pow * pow);\n                geometry.vertices.push(vertex);\n                geometry.colors.push(new THREE.Color(pow, pow, 1));\n                var t = Math.round(pow * 5),\n                    n = 0;\n                while (n < t) {\n                    vertex = new THREE.Vector3();\n                    vertex.x = point.x - dx + Math.random() * (dx * 2);\n                    vertex.y = point.y - dy + Math.random() * (dy * 2);\n                    vertex.z = (-dz + (dz * 2) * Math.random()) * pow;\n                    geometry.vertices.push(vertex);\n                    geometry.colors.push(new THREE.Color(pow, pow, pow));\n                    n++;\n                }\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            notes.geometry = geometry;\n        }\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.addColor(options.colors, 'background').onChange(onChange);\n            gui.addColor(options.colors, 'lines').onChange(onChange);\n            /*\n            gui.add(params, 'stops', 1000, 10000).onChange(function(newValue) {\n                onChange(params);\n            });\n            gui.add(params, 'revolutions', 1.1, 3.1).onChange(function(newValue) {\n                onChange(params);\n            });\n            gui.add(params, 'radius', 300, 1000).onChange(function(newValue) {\n                onChange(params);\n            });\n            gui.add(params, 'sparse', 0.1, 1).onChange(function(newValue) {\n                onChange(params);\n            });\n            gui.add(params, 'dispersion', 0.01, 1).onChange(function(newValue) {\n                onChange(params);\n            });\n            gui.add(params, 'bulge', 0.01, 1).onChange(function(newValue) {\n                onChange(params);\n            });\n            gui.add(params, 'randomize');\n            */\n            onChange(params);\n            return gui;\n        }\n        addGui();\n\n        function spiral(params) {\n            return {\n                toArray: function(now) {\n                    now = now || 0;\n                    var time = now / -60000,\n                        modulus = params.modulus(),\n                        theta = params.armTheta();\n                    var points = [];\n                    var value = 0;\n                    for (var arm = 0; arm < params.arms; arm++) {\n                        for (var stop = 0; stop < params.stops; stop++) {\n                            value = lcg(value, modulus);\n                            var pow = (stop / params.stops),\n                                c = 1 - pow + 1 - params.dispersion,\n                                r = value / modulus,\n                                cr = (r - 0.5) * 2,\n                                angle = (pow * Math.PI * 2 * params.revolutions) + (theta * arm),\n                                radians = time + angle + (Math.PI * c * cr * params.sparse),\n                                distance = Math.sqrt(pow) * params.radius,\n                                x = Math.cos(radians) * distance,\n                                y = Math.sin(radians) * distance,\n                                z = 0,\n                                size = (r - 0.5) * 2 + Math.pow(1.125, (1 - pow) * 8),\n                                alpha = (Math.sin((r + time + pow) * Math.PI * 2) + 1) * 0.5;\n                            points.push({\n                                x: x,\n                                y: y,\n                                z: z,\n                                size: size,\n                                alpha: alpha,\n                            });\n                        }\n                    }\n                    return points;\n                },\n            };\n        }\n\n        /*\n\n        var downloadFile = (function() {\n            var a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.style = \"display: none\";\n            return function(data, fileName, json) {\n                data = json ? JSON.stringify(data) : data;\n                var blob = new Blob([data], { type: \"octet/stream\" }),\n                    url = window.URL.createObjectURL(blob);\n                a.href = url;\n                a.download = fileName;\n                a.click();\n                window.URL.revokeObjectURL(url);\n            };\n        }());\n\n        function string2ArrayBuffer(string, callback) {\n            var blob = new Blob([string])\n            var fr = new FileReader();\n            fr.onload = function(e) {\n                callback(e.target.result);\n            }\n            fr.readAsArrayBuffer(blob);\n        }\n\n        function PCDExporter(vertices) {\n            var data = '# .PCD v.7 - Point Cloud Data file format' + '\\r\\n';\n            data += 'VERSION .7' + '\\r\\n';\n            data += 'FIELDS x y z rgb' + '\\r\\n';\n            data += 'SIZE 4 4 4 4' + '\\r\\n';\n            data += 'TYPE F F F F' + '\\r\\n';\n            data += 'COUNT 1 1 1 1' + '\\r\\n';\n            data += 'WIDTH ' + vertices.length + '\\r\\n';\n            data += 'HEIGHT 1' + '\\r\\n';\n            data += 'VIEWPOINT 0 0 0 1 0 0 0' + '\\r\\n';\n            data += 'POINTS ' + vertices.length + '\\r\\n';\n            data += 'DATA ascii' + '\\r\\n';\n            for (var i = 0; i < vertices.length; i++) {\n                var v = vertices[i];\n                var x = v.x.toFixed(5);\n                var y = v.y.toFixed(5);\n                var z = v.z.toFixed(5);\n                data += x + ' ' + y + ' ' + z + ' 4.2108e+06';\n                if (i < vertices.length - 1) {\n                    data += '\\r\\n';\n                }\n            }\n            return data;\n        }\n        // https://cdn.rawgit.com/mikolalysenko/write-ply/master/write-ply.js\n        function PLYExporter(vertices) {\n            var model = {\n                vertex: {\n                    x: [],\n                    y: [],\n                    z: []\n                },\n                face: {\n                    vertex_index: []\n                }\n            };\n            for (var i = 0; i < vertices.length; i++) {\n                var v = vertices[i];\n                model.vertex.x.push(v.x);\n                model.vertex.y.push(v.y);\n                model.vertex.z.push(v.z);\n            }\n            var data = writePLY(model);\n            return data;\n        }\n        */\n\n        function addListeners() {\n            function handleMouseMove(event) {\n                mouse = { x: event.clientX, y: event.clientY };\n            }\n\n            function handleMouseDown(event) {\n                //\n            }\n\n            function handleMouseUp(event) {\n                //\n            }\n\n            function handleTouchStart(event) {\n                if (event.touches.length > 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function handleTouchEnd(event) {\n                mousePos = { x: windowHalfX, y: windowHalfY };\n            }\n\n            function handleTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                w2 = width / 2;\n                h2 = height / 2;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener('resize', onWindowResize, false);\n            document.addEventListener('mousemove', handleMouseMove, false);\n            document.addEventListener('mousedown', handleMouseDown, false);\n            document.addEventListener('mouseup', handleMouseUp, false);\n            document.addEventListener('touchstart', handleTouchStart, false);\n            document.addEventListener('touchend', handleTouchEnd, false);\n            document.addEventListener('touchmove', handleTouchMove, false);\n        }\n\n        function getPerlinNoise(width, height) {\n            var size = width * height,\n                data = new Uint8Array(size),\n                perlin = new ImprovedNoise(),\n                quality = 1,\n                z = Math.random() * 100;\n            for (var j = 0; j < 4; j++) {\n                for (var i = 0; i < size; i++) {\n                    var x = i % width,\n                        y = ~~(i / width);\n                    data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n                }\n                quality *= 5;\n            }\n            return data;\n        }\n\n        function ImprovedNoise() {\n            var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n                23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n                174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n                133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n                89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n                202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n                248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n                178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n                93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (var i = 0; i < 256; i++) {\n                p[256 + i] = p[i];\n            }\n\n            function fade(t) {\n                return t * t * t * (t * (t * 6 - 15) + 10);\n            }\n\n            function lerp(t, a, b) {\n                return a + t * (b - a);\n            }\n\n            function grad(hash, x, y, z) {\n                var h = hash & 15;\n                var u = h < 8 ? x : y,\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n                return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n            }\n\n            return {\n                noise: function(x, y, z) {\n                    var floorX = Math.floor(x),\n                        floorY = Math.floor(y),\n                        floorZ = Math.floor(z);\n                    var X = floorX & 255,\n                        Y = floorY & 255,\n                        Z = floorZ & 255;\n                    x -= floorX;\n                    y -= floorY;\n                    z -= floorZ;\n                    var xMinus1 = x - 1,\n                        yMinus1 = y - 1,\n                        zMinus1 = z - 1;\n                    var u = fade(x),\n                        v = fade(y),\n                        w = fade(z);\n                    var A = p[X] + Y,\n                        AA = p[A] + Z,\n                        AB = p[A + 1] + Z,\n                        B = p[X + 1] + Y,\n                        BA = p[B] + Z,\n                        BB = p[B + 1] + Z;\n                    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n                                grad(p[BA], xMinus1, y, z)),\n                            lerp(u, grad(p[AB], x, yMinus1, z),\n                                grad(p[BB], xMinus1, yMinus1, z))),\n                        lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n                                grad(p[BA + 1], xMinus1, y, z - 1)),\n                            lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n                                grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n                }\n            };\n        }\n    }]);\n\n    var GPoint = function() {\n        var unit = {\n            x: 0.09,\n            y: 0.09,\n            z: 0.3\n        };\n\n        function GPoint(x, y, z) {\n            this.x = x || 0;\n            this.y = y || 0;\n            this.z = z || 0;\n        }\n        GPoint.prototype = {\n            randomize: function() {\n                this.x = Math.random() * 1000;\n                this.y = Math.random() * 1000;\n                this.z = Math.random() * 1000;\n                return this;\n            },\n            toGrid: function() {\n                this.x = (Math.round(this.x / unit.x) * unit.x);\n                this.y = (Math.round(this.y / unit.y) * unit.y);\n                this.z = (Math.round(this.z / unit.z) * unit.z);\n                return this;\n            },\n            toFixed: function() {\n                this.x = +(this.x.toFixed(2));\n                this.y = +(this.y.toFixed(2));\n                this.z = +(this.z.toFixed(2));\n                return this;\n            },\n        };\n        GPoint.grid = function(points) {\n            for (var i = 0; i < points.length; i++) {\n                points[i].toGrid().toFixed();\n            }\n            GPoint.sort(points);\n        };\n        GPoint.sort = function(points) {\n            points.sort(function(a, b) {\n                if (a.z === b.z) {\n                    if (a.x === b.x) {\n                        if (a.y === b.y) {\n                            return 0;\n                        } else {\n                            return a.y > b.y ? 1 : -1;\n                        }\n                    } else {\n                        return a.x > b.x ? 1 : -1;\n                    }\n                } else {\n                    return a.z > b.z ? 1 : -1;\n                }\n            });\n        };\n        return GPoint;\n    }();\n\n}());"]}