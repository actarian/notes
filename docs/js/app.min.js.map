{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","controller","$scope","setStep","index","previous","currentStep","circle","OBJECTS","circles","getObjectCircles","add","remove","nextStep","Math","min","steps","length","previousStep","max","onChange","params","backgroundColor","THREE","Color","options","colors","background","getHexString","console","log","document","body","style","ribbon","setMaterial","forEach","material","color","setHex","lines","display","dots","animateVertexAtIndex","v","i","d","rows","audioStrength","noiseStrength","r","floor","c","b","abs","dr","dc","drc","bands","pow","analyserData","scale","ni","level","noiseMap","z","getRandomRange","allowNegatives","n","random","a","getObjectRibbon","scene","object","update","cameraStep","cameraPow","targetPow","mod","currentCameraPow","currentTargetPow","position","cameraSpline","getPointAt","target","targetSpline","camera","copy","lookAt","getMaterial","resolution","Vector2","window","innerWidth","innerHeight","MeshLineMaterial","lineWidth","opacity","sizeAttenuation","near","far","depthTest","blending","AdditiveBlending","transparent","side","DoubleSide","prev","Vector3","points","Array","fill","map","p","x","y","spline","CatmullRomCurve3","type","geometry","Geometry","vertices","getPoints","line","MeshLine","setGeometry","Mesh","getObjectDots","verticesNeedUpdate","PointsMaterial","size","Points","space","t","point","vertex","push","getObjectLines","l","LineBasicMaterial","Object3D","Line","adding","Date","now","removing","state","enabled","setTimeout","circularStrength","ai","na","noise","cpow","radius","LineLoop","angle","PI","rad","cos","sin","updateAnalyser","analyser","getByteFrequencyData","loop","stats","begin","render","end","requestAnimationFrame","controls","tube","renderer","addListeners","onWindowResize","width","height","w2","h2","setSize","aspect","updateProjectionMatrix","addEventListener","ImprovedNoise","fade","lerp","grad","hash","h","u","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","Number","prototype","this","audio","gui","fov","ratio","container","audioUrl","notes","randomize","__controllers","__min","value","__max","property","updateDisplay","__color","g","setValue","hex","data","Uint8Array","perlin","quality","j","Scene","PerspectiveCamera","WebGLRenderer","alpha","antialias","logarithmicDepthBuffer","setClearColor","shadowMap","getElementById","appendChild","domElement","Stats","dom","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","bufferLength","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","volume","play","dat","GUI","closed","Circles","Lines","Dots","addColor"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$httpProvider', function($httpProvider) {\r\n        // $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n\r\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\r\n        $locationProvider.html5Mode(true);\r\n        $locationProvider.hashPrefix('');\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.run(['$rootScope', function($rootScope) {\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.controller('RootCtrl', ['$scope', function($scope) {\n\n        var OBJECTS = {};\n\n        Number.prototype.mod = function(n) {\n            return ((this % n) + n) % n;\n        };\n\n        var steps = new Array(24).fill().map(function(v, i) {\n            return i + 1;\n        });\n        var currentStep = 0;\n\n        function setStep(index) {\n            var previous = $scope.currentStep || 0;\n            $scope.currentStep = index;\n            var circle = OBJECTS.circles[index] || getObjectCircles(index);\n            circle.add();\n            OBJECTS.circles[index] = circle;\n            if (previous !== index) {\n                circle = OBJECTS.circles[previous];\n                circle.remove();\n            }\n        }\n\n        function nextStep() {\n            currentStep++;\n            currentStep = Math.min(steps.length - 1, currentStep);\n            // currentStep = currentStep % steps.length;\n            setStep(currentStep);\n        }\n\n        function previousStep() {\n            currentStep--;\n            currentStep = Math.max(0, currentStep);\n            // currentStep = currentStep % steps.length;\n            setStep(currentStep);\n        }\n\n        $scope.nextStep = nextStep;\n        $scope.previousStep = previousStep;\n        $scope.currentStep = currentStep;\n\n\n        var analyser, analyserData, audio;\n        var stats, gui, scene, camera, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\n        var controls = null;\n\n        var options = {\n            audioUrl: \"audio/rossini-192.mp3\",\n            colors: {\n                background: 0x111111, // 0xffffff,\n                lines: 0x999999, // 0x888888,\n                notes: 0x444444, // 0xaaaaaa,\n            },\n            bands: 256,\n            rows: 128,\n            space: 10,\n            audioStrength: 60,\n            noiseStrength: 25,\n            circularStrength: 0.90,\n            display: '0',\n            randomize: function() {\n                for (var i = 0; i < gui.__controllers.length; i++) {\n                    var c = gui.__controllers[i];\n                    if (c.__min) {\n                        var value = c.__min + (c.__max - c.__min) * Math.random();\n                        this[c.property] = value;\n                        c.updateDisplay();\n                    }\n                    if (c.__color) {\n                        c.__color.r = Math.floor(Math.random() * 255);\n                        c.__color.g = Math.floor(Math.random() * 255);\n                        c.__color.b = Math.floor(Math.random() * 255);\n                        c.updateDisplay();\n                        c.setValue(c.__color.hex);\n                    }\n                }\n            }\n        };\n\n        options.points = new Array(options.bands * 2).fill(null).map(function() {\n            var r = 1000,\n                d = r * 2;\n            return new THREE.Vector3(-r + Math.random() * d, -r + Math.random() * d, -r + Math.random() * d);\n        });\n        options.noiseMap = getPerlinNoise(options.rows, options.rows);\n\n        function onChange(params) {\n            // renderer.setClearColor(options.colors.background, 1);\n            var backgroundColor = new THREE.Color(options.colors.background).getHexString();\n            console.log('backgroundColor', backgroundColor);\n            document.body.style.backgroundColor = '#' + backgroundColor;\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.setMaterial();\n            }\n            angular.forEach(OBJECTS.circles, function(circle) {\n                if (circle) {\n                    circle.material.color.setHex(options.colors.lines);\n                }\n            });\n            /*\n            if (OBJECTS.circles) {\n                OBJECTS.circles.material.color.setHex(options.colors.lines);\n                if (options.display === '0') {\n                    OBJECTS.circles.add();\n                } else {\n                    OBJECTS.circles.remove();\n                }\n            }\n            */\n            if (OBJECTS.lines) {\n                OBJECTS.lines.material.color.setHex(options.colors.lines);\n                if (options.display === '1') {\n                    OBJECTS.lines.add();\n                } else {\n                    OBJECTS.lines.remove();\n                }\n            }\n            if (OBJECTS.dots) {\n                OBJECTS.dots.material.color.setHex(options.colors.lines);\n                if (options.display === '2') {\n                    OBJECTS.dots.add();\n                } else {\n                    OBJECTS.dots.remove();\n                }\n            }\n        }\n\n        function createLights() {\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n            shadow.position.set(200, 200, 200);\n            shadow.castShadow = true;\n            // shadow.shadowDarkness = .2;\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\n            back.position.set(-100, 200, 50);\n            // back.shadowDarkness = .2;\n            back.castShadow = true;\n            scene.add(light);\n            scene.add(shadow);\n            scene.add(back);\n        }\n\n        function createScene() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            ratio = width / height;\n            w2 = width / 2;\n            h2 = height / 2;\n            fov = 60;\n            near = 0.001;\n            far = 20000;\n\n            scene = new THREE.Scene();\n            // scene.fog = new THREE.Fog(0x000000, 300, 1000);\n\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n            camera.position.z = 100;\n            camera.position.y = -500;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true,\n                logarithmicDepthBuffer: true\n            });\n            renderer.setClearColor(0x000000, 0); // the default\n            // renderer.setClearColor(options.colors.background, 1);\n            renderer.setSize(width, height);\n            renderer.shadowMap.enabled = true;\n            container = document.getElementById('scene');\n            container.appendChild(renderer.domElement);\n\n            stats = new Stats();\n            container.appendChild(stats.dom);\n\n            addListeners();\n            // controls = new THREE.OrbitControls(camera, renderer.domElement);\n        }\n\n        function animateVertexAtIndex(v, i, d) {\n            var rows = options.rows,\n                audioStrength = options.audioStrength,\n                noiseStrength = options.noiseStrength;\n            var r = Math.floor(i / rows);\n            var c = i - r * rows;\n            var b = Math.abs(c - rows / 2) * 2;\n            var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n            var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n            var drc = (dr + dc) / 2;\n            var index = b % options.bands;\n            var pow = analyserData[index];\n            var scale = (pow / options.bands) * dr * 2;\n            var ni = r * rows + ((c + d) % rows);\n            var level = (options.noiseMap[ni] / 64 * noiseStrength) * drc + (audioStrength * scale);\n            v.z += (level - v.z) / (3 + 3 * Math.max(0.000001, 1 - drc));\n        }\n\n        function getObjectTube() {\n            var options = {\n                path: spline,\n                tubularSegments: 500,\n                radius: 1,\n                radiusSegments: 2,\n                closed: true,\n            }\n            var spline = new THREE.CatmullRomCurve3([\n                new THREE.Vector3(-400, -400, 0),\n                new THREE.Vector3(400, -400, 0),\n                new THREE.Vector3(1400, -400, 0),\n                new THREE.Vector3(400, 400, 0),\n                new THREE.Vector3(-400, 400, 0)\n            ]);\n            spline.type = 'catmullrom';\n            spline.closed = true;\n\n            var object = new THREE.Object3D();\n            scene.add(object);\n\n            var material = new THREE.MeshLambertMaterial({\n                color: 0xffffff\n            });\n            var geometry = new THREE.TubeBufferGeometry(spline, options.tubularSegments, options.radius, options.radiusSegments, options.closed);\n            var group = new THREE.Mesh(geometry, material);\n            object.add(group);\n\n            // if (group !== undefined) {\n            //     object.remove(group);\n            //     group.children[0].geometry.dispose();\n            //     group.children[1].geometry.dispose();\n            // }            \n\n            /*\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(500);\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n            var material = new MeshLineMaterial({\n                color: new THREE.Color(0xffffff),\n                lineWidth: 4,\n            });\n            var mesh = new THREE.Mesh(line.geometry, material);\n            object.add(mesh);\n            */\n\n            function add() {\n                console.log('OBJECTS.tube.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.tube.remove');\n                scene.remove(object);\n            }\n\n            var d = 0; // iterator\n            var a = new THREE.Vector3(); // normal\n            var b = new THREE.Vector3(); // binormal\n\n            function update() {\n                var duration = 20 * 1000;\n                var scale = 1;\n                var offset = 15;\n                var lookAhead = true;\n                var msec = Date.now();\n                var pow = (msec % duration) / duration;\n                var dir = spline.getTangentAt(pow);\n                var tangents = geometry.tangents;\n                var binormals = geometry.binormals;\n                var x = pow * tangents.length;\n                var c = Math.floor(x);\n                var n = (c + 1) % tangents.length;\n                b.subVectors(binormals[n], binormals[c]);\n                b.multiplyScalar(x - c).add(binormals[c]);\n                a.copy(b).cross(dir);\n                var p = spline.getPointAt(pow);\n                p.multiplyScalar(scale);\n                p.add(a.clone().multiplyScalar(offset));\n                camera.position.copy(p);\n                var lookAt;\n                if (lookAhead) {\n                    // using arclength for stablization in look ahead\n                    lookAt = spline.getPointAt((pow + 30 / spline.getLength()) % 1).multiplyScalar(scale);\n                } else {\n                    // camera orientation 2 - up orientation via normal\n                    lookAt = new THREE.Vector3().copy(p).add(dir);\n                }\n                camera.matrix.lookAt(camera.position, lookAt, a);\n                camera.rotation.setFromRotationMatrix(camera.matrix, camera.rotation.order);\n                d++;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                geometry: geometry,\n                add: add,\n                remove: remove,\n                update: update,\n            };\n        }\n\n        function getRandomRange(min, max, allowNegatives) {\n            var n = -1 + Math.random() * 2;\n            var a = Math.abs(n);\n            var s = allowNegatives ? Math.floor(n / a) : 1;\n            return s * (min + (max - min) * a);\n        }\n\n        function getObjectRibbon() {\n            var material = getMaterial();\n\n            /*\n            var points = [\n                new THREE.Vector3(-2000, 0, -2000),\n                new THREE.Vector3(2000, 0, -2000),\n                new THREE.Vector3(4000, 0, -2000),\n                new THREE.Vector3(2000, 0, 2000),\n                new THREE.Vector3(-2000, 0, 2000)\n            ];\n            */\n\n            var prev = new THREE.Vector3();\n            var points = new Array(12).fill(null).map(function() {\n                var p = new THREE.Vector3().copy(prev);\n                prev.x += getRandomRange(500, 1000, true);\n                prev.y += getRandomRange(50, 100, true);\n                prev.z += getRandomRange(1000, 2000, false);\n                return p;\n            });\n\n            var spline = new THREE.CatmullRomCurve3(points);\n            spline.type = 'catmullrom';\n            // spline.closed = true;\n\n            var cameraHeight = 30;\n            var cameraSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + cameraHeight, p.z);\n            }));\n            cameraSpline.type = 'catmullrom';\n            // cameraSpline.closed = true;\n\n            var targetHeight = 15;\n            var targetSpline = new THREE.CatmullRomCurve3(spline.points.map(function(p) {\n                return new THREE.Vector3(p.x, p.y + targetHeight, p.z);\n            }));\n            targetSpline.type = 'catmullrom';\n            // targetSpline.closed = true;\n\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(1200);\n\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n\n            var object = new THREE.Mesh(line.geometry, material);\n            // var object = new THREE.Object3D();\n            // object.add(mesh);\n            scene.add(object);\n\n            function add() {\n                console.log('OBJECTS.ribbon.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.ribbon.remove');\n                scene.remove(object);\n            }\n\n            var i = 0; // iterator\n\n            camera.target = camera.target || new THREE.Vector3(0, 0, 0);\n\n            var currentTargetPow = 0,\n                currentCameraPow = 0;\n\n            function update() {\n\n                var cameraStep = (1 / steps.length) / 10;\n                var cameraPow = currentStep / steps.length;\n                var targetPow = (cameraPow + cameraStep).mod(1);\n\n                currentCameraPow += (cameraPow - currentCameraPow) / 8;\n                currentTargetPow += (targetPow - currentTargetPow) / 8;\n\n                var position = cameraSpline.getPointAt(currentCameraPow);\n                var target = targetSpline.getPointAt(currentTargetPow);\n\n                /*\n                var duration = 20 * 1000;\n                var msec = Date.now();\n\n                var positionPow = ((msec - 1000) % duration) / duration;\n                var position = cameraSpline.getPointAt(positionPow);\n\n                var pow = (msec % duration) / duration;\n                var target = spline.getPointAt(pow);\n                */\n\n                camera.position.copy(position);\n                camera.target.copy(target);\n                camera.lookAt(camera.target);\n\n                // var dir = spline.getTangentAt(pow);\n                /*                \n                var lookAhead = true;\n                var lookAt;\n                if (lookAhead) {\n                    // using arclength for stablization in look ahead\n                    lookAt = spline.getPointAt((pow + 30 / spline.getLength()) % 1).multiplyScalar(scale);\n                } else {\n                    // camera orientation 2 - up orientation via normal\n                    lookAt = new THREE.Vector3().copy(p).add(dir);\n                }\n                camera.matrix.lookAt(camera.position, lookAt, a);\n                camera.rotation.setFromRotationMatrix(camera.matrix, camera.rotation.order);\n                */\n\n                i++;\n            }\n\n            function getMaterial() {\n                var resolution = new THREE.Vector2(window.innerWidth, window.innerHeight);\n                return new MeshLineMaterial({\n                    color: new THREE.Color(options.colors.lines),\n                    lineWidth: 4,\n                    opacity: 1,\n                    resolution: resolution,\n                    sizeAttenuation: 1,\n                    near: 1,\n                    far: 1000,\n                    depthTest: false,\n                    blending: THREE.AdditiveBlending,\n                    transparent: false,\n                    side: THREE.DoubleSide,\n                });\n            }\n\n            function setMaterial() {\n                // !!! non va bene\n                OBJECTS.ribbon.material = getMaterial();\n                OBJECTS.ribbon.object.material = OBJECTS.ribbon.material;\n            }\n\n            return {\n                object: object,\n                spline: spline,\n                cameraSpline: cameraSpline,\n                targetSpline: targetSpline,\n                geometry: geometry,\n                material: material,\n                add: add,\n                remove: remove,\n                update: update,\n                setMaterial: setMaterial,\n            };\n        }\n\n        function getObjectDots() {\n            var material = new THREE.PointsMaterial({\n                color: options.colors.lines,\n                size: 1,\n                sizeAttenuation: false,\n                // vertexColors: THREE.VertexColors,\n            });\n            var geometry = new THREE.Geometry();\n            var object = new THREE.Points(geometry, material);\n            var rows = options.rows,\n                space = options.space;\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                return {\n                    x: -(space * rows / 2) + space * c,\n                    y: -(space * rows / 2) + space * r,\n                    z: 0,\n                };\n            });\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var point = points[i];\n                var vertex = new THREE.Vector3();\n                vertex.x = point.x;\n                vertex.y = point.y;\n                vertex.z = point.z;\n                geometry.vertices.push(vertex);\n                // geometry.colors.push(new THREE.Color(0xffcc00));\n                i++;\n            }\n            // geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            object.geometry = geometry;\n\n            function add() {\n                console.log('OBJECTS.dots.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.dots.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                d++;\n                geometry.verticesNeedUpdate = true;\n            }\n\n            return {\n                object: object,\n                material: material,\n                add: add,\n                remove: remove,\n                update: update,\n            };\n        }\n\n        function getObjectLines() {\n            var object, material, lines = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            var rows = options.rows,\n                space = options.space;\n            while (lines.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var line = new THREE.Line(geometry, material);\n                line.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // line.spline = spline;\n                lines.push(line);\n                object.add(line);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                var point = new THREE.Vector3(-(space * rows / 2) + space * c, -(space * rows / 2) + space * r,\n                    0\n                );\n                lines[c].points[r] = point;\n                lines[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            function add() {\n                console.log('OBJECTS.lines.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.lines.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength;\n                angular.forEach(points, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                angular.forEach(lines, function(line, l) {\n                    // var points = line.points;\n                    // var spline = line.spline;\n                    // spline.getPoints(rows * 2);\n                    // line.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    line.geometry.verticesNeedUpdate = true;\n                });\n                d++;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        function getObjectCircles(index) {\n            var object, material, circles = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            var rows = options.rows,\n                space = options.space;\n            while (circles.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var circle = new THREE.LineLoop(geometry, material);\n                circle.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                circles.push(circle);\n                object.add(circle);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var angle = 2 * Math.PI / rows;\n                var rad = angle * r + angle * c * 0.1;\n                var point = new THREE.Vector3();\n                point.r = {\n                    x: Math.cos(rad),\n                    y: Math.sin(rad),\n                    z: 96 + (c * c * c * 0.0001),\n                };\n                circles[c].points[r] = point;\n                circles[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            var state = {\n                enabled: false,\n            };\n\n            var adding = false,\n                removing = false;\n\n            function add() {\n                console.log('OBJECTS.circles.add');\n                scene.add(object);\n                adding = Date.now();\n                removing = false;\n                state.enabled = true;\n                setTimeout(function() {\n                    adding = false;\n                }, 3000);\n            }\n\n            function remove() {\n                console.log('OBJECTS.circles.remove');\n                adding = false;\n                removing = Date.now();\n                setTimeout(function() {\n                    scene.remove(object);\n                    removing = false;\n                    state.enabled = false;\n                }, 3000);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength,\n                    circularStrength = options.circularStrength;\n                angular.forEach(points, function(v, i) {\n                    // animateVertexAtIndex(v, i, d);\n                    var r = Math.floor(i / rows);\n                    var c = i - r * rows;\n                    var b = Math.abs(c - rows / 2) * 2;\n                    var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                    var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                    var drc = (dr + dc) / 2;\n                    var ai = r % options.bands;\n                    var pow = (analyserData[ai] + analyserData[rows - 1 - ai]) / 2;\n                    var scale = pow / options.bands;\n                    var na = c * rows + ((r + d) % rows);\n                    var noise = options.noiseMap[na];\n                    var cpow = 1 - ((rows - c) / rows * circularStrength);\n                    var level = v.r.z + (noise / 64 * noiseStrength) * cpow + (audioStrength * 2 * scale * scale) * cpow;\n                    var radius = v.radius || level;\n                    radius += (level - radius) / 2;\n                    v.x = v.r.x * radius;\n                    v.y = v.r.y * radius;\n                    v.z = 0; // -c;\n                    v.radius = radius;\n                });\n                angular.forEach(circles, function(circle, l) {\n                    // var points = circle.points;\n                    // var spline = circle.spline;\n                    // spline.getPoints(rows * 2);\n                    // circle.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    circle.geometry.verticesNeedUpdate = true;\n                });\n                object.lookAt(camera.position);\n                d++;\n            }\n\n            var position = OBJECTS.ribbon.cameraSpline.getPointAt((index + 0.5) / steps.length);\n\n            object.position.copy(position);\n            object.scale.x = object.scale.y = object.scale.z = 0.3;\n\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n                state: state,\n            };\n        }\n\n        function createObjects() {\n            // OBJECTS.tube = getObjectTube();\n            OBJECTS.ribbon = getObjectRibbon();\n            OBJECTS.dots = getObjectDots();\n            OBJECTS.lines = getObjectLines();\n            OBJECTS.circles = new Array(steps).fill(null);\n            // OBJECTS.notes = getNotes();\n        }\n\n        function createAnalyser() {\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n            source = null;\n            ctx = new actx();\n            analyser = ctx.createAnalyser();\n            audio = new Audio();\n            audio.src = options.audioUrl;\n            audio.controls = true;\n            audio.addEventListener('canplay', function() {\n                var bufferLength;\n                console.log('audio canplay');\n                source = ctx.createMediaElementSource(audio);\n                source.connect(analyser);\n                source.connect(ctx.destination);\n                analyser.fftSize = options.bands * 2;\n                bufferLength = analyser.frequencyBinCount;\n                console.log('bufferLength', bufferLength);\n                analyserData = new Uint8Array(bufferLength);\n                return analyserData;\n            });\n            audio.volume = 0.01;\n            return audio.play();\n        }\n\n        function updateAnalyser() {\n            // notes.rotation.z -= 0.0025;\n            // lines.rotation.z -= 0.0025;            \n            if (analyserData) {\n                analyser.getByteFrequencyData(analyserData);\n                if (options.display === '0') {\n                    angular.forEach(OBJECTS.circles, function(circle) {\n                        if (circle && circle.state.enabled) {\n                            circle.update();\n                        }\n                    });\n                } else if (options.display === '1') {\n                    OBJECTS.lines.update();\n                } else if (options.display === '2') {\n                    OBJECTS.dots.update();\n                }\n                // OBJECTS.notes.update();\n            }\n        }\n\n        function loop() {\n            stats.begin();\n            render();\n            stats.end();\n            requestAnimationFrame(loop);\n        }\n\n        function render() {\n            if (controls) {\n                controls.update();\n            }\n            if (OBJECTS.tube) {\n                OBJECTS.tube.update();\n            }\n            if (OBJECTS.ribbon) {\n                OBJECTS.ribbon.update();\n            }\n            updateAnalyser();\n            renderer.render(scene, camera);\n        }\n\n        createScene();\n        // createLights();\n        createObjects();\n        createAnalyser();\n        addGui();\n        onChange();\n        loop();\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.add(options, 'display', { Circles: 0, Lines: 1, Dots: 2 }).onChange(onChange);\n            gui.addColor(options.colors, 'background').onChange(onChange);\n            gui.addColor(options.colors, 'lines').onChange(onChange);\n            gui.add(options, 'audioStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'noiseStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'circularStrength', 0.01, 0.90).onChange(onChange);\n            gui.add(options, 'randomize');\n            return gui;\n        }\n\n        function addListeners() {\n            function handleMouseMove(event) {\n                mouse = { x: event.clientX, y: event.clientY };\n            }\n\n            function handleMouseDown(event) {\n                //\n            }\n\n            function handleMouseUp(event) {\n                //\n            }\n\n            function handleTouchStart(event) {\n                if (event.touches.length > 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function handleTouchEnd(event) {\n                mousePos = { x: windowHalfX, y: windowHalfY };\n            }\n\n            function handleTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                w2 = width / 2;\n                h2 = height / 2;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener('resize', onWindowResize, false);\n            /*\n            document.addEventListener('mousemove', handleMouseMove, false);\n            document.addEventListener('mousedown', handleMouseDown, false);\n            document.addEventListener('mouseup', handleMouseUp, false);\n            document.addEventListener('touchstart', handleTouchStart, false);\n            document.addEventListener('touchend', handleTouchEnd, false);\n            document.addEventListener('touchmove', handleTouchMove, false);\n            */\n        }\n\n        function getSprite() {\n            var canvas = document.createElement('canvas');\n            canvas.width = 128;\n            canvas.height = 128;\n            var ctx = canvas.getContext('2d');\n            var gradient = ctx.createRadialGradient(\n                canvas.width / 2,\n                canvas.height / 2,\n                0,\n                canvas.width / 2,\n                canvas.height / 2,\n                canvas.width / 2\n            );\n            /*\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\n            ctx.fillStyle = gradient;\n            */\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            return canvas;\n        }\n\n        function getPerlinNoise(width, height) {\n            var size = width * height,\n                data = new Uint8Array(size),\n                perlin = new ImprovedNoise(),\n                quality = 1,\n                z = Math.random() * 100;\n            for (var j = 0; j < 4; j++) {\n                for (var i = 0; i < size; i++) {\n                    var x = i % width,\n                        y = ~~(i / width);\n                    data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n                }\n                quality *= 5;\n            }\n            return data;\n        }\n\n        function ImprovedNoise() {\n            var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n                23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n                174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n                133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n                89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n                202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n                248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n                178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n                93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (var i = 0; i < 256; i++) {\n                p[256 + i] = p[i];\n            }\n\n            function fade(t) {\n                return t * t * t * (t * (t * 6 - 15) + 10);\n            }\n\n            function lerp(t, a, b) {\n                return a + t * (b - a);\n            }\n\n            function grad(hash, x, y, z) {\n                var h = hash & 15;\n                var u = h < 8 ? x : y,\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n                return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n            }\n\n            return {\n                noise: function(x, y, z) {\n                    var floorX = Math.floor(x),\n                        floorY = Math.floor(y),\n                        floorZ = Math.floor(z);\n                    var X = floorX & 255,\n                        Y = floorY & 255,\n                        Z = floorZ & 255;\n                    x -= floorX;\n                    y -= floorY;\n                    z -= floorZ;\n                    var xMinus1 = x - 1,\n                        yMinus1 = y - 1,\n                        zMinus1 = z - 1;\n                    var u = fade(x),\n                        v = fade(y),\n                        w = fade(z);\n                    var A = p[X] + Y,\n                        AA = p[A] + Z,\n                        AB = p[A + 1] + Z,\n                        B = p[X + 1] + Y,\n                        BA = p[B] + Z,\n                        BB = p[B + 1] + Z;\n                    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n                                grad(p[BA], xMinus1, y, z)),\n                            lerp(u, grad(p[AB], x, yMinus1, z),\n                                grad(p[BB], xMinus1, yMinus1, z))),\n                        lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n                                grad(p[BA + 1], xMinus1, y, z - 1)),\n                            lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n                                grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n                }\n            };\n        }\n\n\n\n        //////////\n\n        function addNotes() {\n            // alert('onChange', params);\n            /*\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\n            */\n            var geometry = new THREE.Geometry();\n            // geometry.vertices.splice(0, geometry.vertices.length);\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            notes.geometry = geometry;\n            addSplines(points);\n        }\n\n        function addSplines(points) {\n            points = points.map(function(point) {\n                return new THREE.Vector3(point.x, point.y, point.z);\n            });\n            var spline = new THREE.CatmullRomCurve3(points);\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(5000);\n            // geometry.mergeVertices();\n            // geometry.verticesNeedUpdate = true;\n            // geometry.computeLineDistances();\n            // geometry.lineDistancesNeedUpdate = true;\n            lines.geometry = geometry;\n        }\n\n        /*\n        function getNotes() {\n            var object, geometry, material;\n            geometry = new THREE.Geometry();\n            texture = new THREE.CanvasTexture(getSprite());\n            material = new THREE.PointsMaterial({\n                size: 12,\n                map: texture,\n                vertexColors: THREE.VertexColors,\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent: true\n            });\n            material = new THREE.PointsMaterial({\n                color: options.colors.notes,\n                size: 2,\n                sizeAttenuation: false,\n            });\n            object = new THREE.Points(geometry, material);\n\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n\n            function add() {\n                console.log('OBJECTS.notes.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.notes.remove');\n                scene.remove(object);\n            }\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    var index = i % options.bands;\n                    var pow = analyserData[index];\n                    var scale = (pow / options.bands) * 2;\n                    var p = options.points[i];\n                    var vx = p.x * (1 + scale);\n                    var vy = p.y * (1 + scale);\n                    var vz = p.z * (1 + scale);\n                    v.x += (vx - v.x) / 3;\n                    v.y += (vy - v.y) / 3;\n                    v.z += (vz - v.z) / 3;\n                });\n                geometry.verticesNeedUpdate = true;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n\n        function getLines() {\n            var object, geometry, material;\n\n            geometry = new THREE.Geometry();\n            material = new THREE.LineDashedMaterial({\n                color: options.colors.lines,\n                dashSize: 1,\n                gapSize: 0.5,\n            });\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Line(geometry, material);\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            function update() {\n\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n        */\n\n    }]);\n\n}());"]}