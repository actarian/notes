{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","app","GPoint","x","y","z","this","unit","prototype","randomize","Math","random","toGrid","round","toFixed","grid","points","i","length","sort","a","b","controller","$scope","updateAnalyser","analyserData","analyser","getByteFrequencyData","forEach","notes","geometry","vertices","v","bandIndex","options","totalBands","pow","scale","p","vx","vy","vz","verticesNeedUpdate","rows","strength","groundStrength","ground","r","floor","c","abs","dr","dc","drc","ni","d","heightMap","loop","stats","begin","render","end","requestAnimationFrame","controls","update","renderer","scene","camera","addSplines","map","point","THREE","Vector3","spline","CatmullRomCurve3","Geometry","getPoints","lines","onChange","params","addListeners","handleMouseMove","event","mouse","clientX","clientY","handleMouseDown","handleMouseUp","handleTouchStart","touches","preventDefault","mousePos","pageX","pageY","handleTouchEnd","windowHalfX","windowHalfY","handleTouchMove","onWindowResize","width","window","innerWidth","height","innerHeight","w2","h2","setSize","aspect","updateProjectionMatrix","addEventListener","document","generateHeight","size","data","Uint8Array","perlin","ImprovedNoise","quality","j","noise","fade","t","lerp","grad","hash","h","u","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","groundPoints","space","audioUrl","Array","fill","audio","gui","fov","ratio","near","far","container","Scene","PerspectiveCamera","position","lookAt","WebGLRenderer","alpha","antialias","shadowMap","enabled","getElementById","appendChild","domElement","Stats","dom","OrbitControls","material","PointsMaterial","color","sizeAttenuation","Points","add","n","idrc","Color","vertex","push","mergeVertices","LineBasicMaterial","Line","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","bufferLength","console","log","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","play","GalaxyParameters","arms","stops","revolutions","radius","sparse","dispersion","bulge","displayOutline","__controllers","__min","value","__max","property","updateDisplay","armTheta","PI","modulus"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$httpProvider', function($httpProvider) {\r\n        // $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n\r\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\r\n        $locationProvider.html5Mode(true);\r\n        $locationProvider.hashPrefix('');\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.run(['$rootScope', function($rootScope) {\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    var GPoint = function() {\r\n        var unit = {\r\n            x: 0.09,\r\n            y: 0.09,\r\n            z: 0.3\r\n        };\r\n\r\n        function GPoint(x, y, z) {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n        }\r\n        GPoint.prototype = {\r\n            randomize: function() {\r\n                this.x = Math.random() * 1000;\r\n                this.y = Math.random() * 1000;\r\n                this.z = Math.random() * 1000;\r\n                return this;\r\n            },\r\n            toGrid: function() {\r\n                this.x = (Math.round(this.x / unit.x) * unit.x);\r\n                this.y = (Math.round(this.y / unit.y) * unit.y);\r\n                this.z = (Math.round(this.z / unit.z) * unit.z);\r\n                return this;\r\n            },\r\n            toFixed: function() {\r\n                this.x = +(this.x.toFixed(2));\r\n                this.y = +(this.y.toFixed(2));\r\n                this.z = +(this.z.toFixed(2));\r\n                return this;\r\n            },\r\n        };\r\n        GPoint.grid = function(points) {\r\n            for (var i = 0; i < points.length; i++) {\r\n                points[i].toGrid().toFixed();\r\n            }\r\n            GPoint.sort(points);\r\n        };\r\n        GPoint.sort = function(points) {\r\n            points.sort(function(a, b) {\r\n                if (a.z === b.z) {\r\n                    if (a.x === b.x) {\r\n                        if (a.y === b.y) {\r\n                            return 0;\r\n                        } else {\r\n                            return a.y > b.y ? 1 : -1;\r\n                        }\r\n                    } else {\r\n                        return a.x > b.x ? 1 : -1;\r\n                    }\r\n                } else {\r\n                    return a.z > b.z ? 1 : -1;\r\n                }\r\n            });\r\n        };\r\n        return GPoint;\r\n    }();\r\n\r\n    app.controller('RootCtrl', ['$scope', function($scope) {\r\n\r\n        var options = {\r\n            groundPoints: [],\r\n            totalBands: 256,\r\n            rows: 256,\r\n            space: 10,\r\n            strength: 60,\r\n            groundStrength: 15,\r\n            heightMap: generateHeight(256, 256),\r\n            audioUrl: \"audio/rossini-192.mp3\",\r\n        };\r\n\r\n        options.points = new Array(options.totalBands * 2).fill(null).map(function() {\r\n            var r = 1000,\r\n                d = r * 2;\r\n            return new THREE.Vector3(-r + Math.random() * d, -r + Math.random() * d, -r + Math.random() * d);\r\n        });\r\n        options.heightMap = generateHeight(options.rows, options.rows);\r\n\r\n        var analyser, analyserData, audio;\r\n\r\n        var stats, gui, scene, camera, controls, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\r\n\r\n        // objects\r\n        var ground, notes, lines;\r\n\r\n        function createLights() {\r\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\r\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\r\n            shadow.position.set(200, 200, 200);\r\n            shadow.castShadow = true;\r\n            // shadow.shadowDarkness = .2;\r\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\r\n            back.position.set(-100, 200, 50);\r\n            // back.shadowDarkness = .2;\r\n            back.castShadow = true;\r\n            scene.add(light);\r\n            scene.add(shadow);\r\n            scene.add(back);\r\n        }\r\n\r\n        function createScene() {\r\n            width = window.innerWidth;\r\n            height = window.innerHeight;\r\n            ratio = width / height;\r\n            w2 = width / 2;\r\n            h2 = height / 2;\r\n            fov = 60;\r\n            near = 1;\r\n            far = 20000;\r\n            scene = new THREE.Scene();\r\n            // scene.fog = new THREE.Fog(0xeeeeee, 256, 500);\r\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\r\n            camera.position.z = 100;\r\n            camera.position.y = -500;\r\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n            renderer = new THREE.WebGLRenderer({\r\n                alpha: true,\r\n                antialias: true\r\n            });\r\n            renderer.setSize(width, height);\r\n            renderer.shadowMap.enabled = true;\r\n            container = document.getElementById('scene');\r\n            container.appendChild(renderer.domElement);\r\n\r\n            stats = new Stats();\r\n            container.appendChild(stats.dom);\r\n\r\n            addListeners();\r\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n        }\r\n\r\n        function createObjects() {\r\n            var texture, geometry, material;\r\n            // ground\r\n            material = new THREE.PointsMaterial({\r\n                color: 0x888888,\r\n                size: 1,\r\n                sizeAttenuation: false,\r\n                // vertexColors: THREE.VertexColors,\r\n            });\r\n            geometry = new THREE.Geometry();\r\n            ground = new THREE.Points(geometry, material);\r\n            scene.add(ground);\r\n\r\n            var rows = options.rows,\r\n                space = options.space;\r\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\r\n                var r = Math.floor(i / rows);\r\n                var c = i - r * rows;\r\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\r\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\r\n                var drc = (dr + dc) / 2;\r\n                var idrc = 1 - drc;\r\n                return {\r\n                    x: -(space * rows / 2) + space * c,\r\n                    y: -(space * rows / 2) + space * r,\r\n                    z: 0,\r\n                    color: new THREE.Color(idrc, idrc, idrc),\r\n                };\r\n            });\r\n\r\n            var i = 0,\r\n                t = points.length;\r\n            while (i < t) {\r\n                var point = points[i];\r\n                var vertex = new THREE.Vector3();\r\n                vertex.x = point.x;\r\n                vertex.y = point.y;\r\n                vertex.z = point.z;\r\n                geometry.vertices.push(vertex);\r\n                // geometry.colors.push(point.color);\r\n                i++;\r\n            }\r\n            geometry.mergeVertices();\r\n            geometry.verticesNeedUpdate = true;\r\n            ground.geometry = geometry;\r\n\r\n            // lines\r\n            geometry = new THREE.Geometry();\r\n            /*\r\n            material = new THREE.LineDashedMaterial({\r\n                color: 0x000000,\r\n                dashSize: 1,\r\n                gapSize: 0.5,\r\n            });\r\n            */\r\n            material = new THREE.LineBasicMaterial({\r\n                color: 0xcccccc\r\n            });\r\n            lines = new THREE.Line(geometry, material);\r\n            // scene.add(lines);\r\n            // notes\r\n            geometry = new THREE.Geometry();\r\n            /*\r\n            texture = new THREE.CanvasTexture(sprite());\r\n            material = new THREE.PointsMaterial({\r\n                size: 12,\r\n                map: texture,\r\n                vertexColors: THREE.VertexColors,\r\n                blending: THREE.AdditiveBlending,\r\n                depthTest: false,\r\n                transparent: true\r\n            });\r\n            */\r\n            material = new THREE.PointsMaterial({\r\n                color: 0xaaaaaa,\r\n                size: 2,\r\n                sizeAttenuation: false,\r\n            });\r\n            notes = new THREE.Points(geometry, material);\r\n            scene.add(notes);\r\n        }\r\n\r\n        function createAnalyser() {\r\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\r\n            source = null;\r\n            ctx = new actx();\r\n            analyser = ctx.createAnalyser();\r\n            audio = new Audio();\r\n            audio.src = options.audioUrl;\r\n            audio.controls = true;\r\n            audio.addEventListener('canplay', function() {\r\n                var bufferLength;\r\n                console.log('audio canplay');\r\n                source = ctx.createMediaElementSource(audio);\r\n                source.connect(analyser);\r\n                source.connect(ctx.destination);\r\n                analyser.fftSize = options.totalBands * 2;\r\n                bufferLength = analyser.frequencyBinCount;\r\n                console.log('bufferLength', bufferLength);\r\n                analyserData = new Uint8Array(bufferLength);\r\n                return analyserData;\r\n            });\r\n            return audio.play();\r\n        }\r\n\r\n        var d = 0;\r\n\r\n        function updateAnalyser() {\r\n            // notes.rotation.z -= 0.0025;\r\n            // lines.rotation.z -= 0.0025;            \r\n            if (analyserData) {\r\n                analyser.getByteFrequencyData(analyserData);\r\n                angular.forEach(notes.geometry.vertices, function(v, i) {\r\n                    var bandIndex = i % options.totalBands;\r\n                    var pow = analyserData[bandIndex];\r\n                    var scale = (pow / options.totalBands) * 2;\r\n                    var p = options.points[i];\r\n                    var vx = p.x * (1 + scale);\r\n                    var vy = p.y * (1 + scale);\r\n                    var vz = p.z * (1 + scale);\r\n                    v.x += (vx - v.x) / 3;\r\n                    v.y += (vy - v.y) / 3;\r\n                    v.z += (vz - v.z) / 3;\r\n                });\r\n                notes.geometry.verticesNeedUpdate = true;\r\n                var rows = options.rows,\r\n                    strength = options.strength,\r\n                    groundStrength = options.groundStrength;\r\n                angular.forEach(ground.geometry.vertices, function(v, i) {\r\n                    var r = Math.floor(i / rows);\r\n                    var c = i - r * rows;\r\n                    var b = Math.abs(c - rows / 2) * 2;\r\n                    var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\r\n                    var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\r\n                    var drc = (dr + dc) / 2;\r\n                    var bandIndex = b % options.totalBands;\r\n                    var pow = analyserData[bandIndex];\r\n                    var scale = (pow / options.totalBands) * dr * 2;\r\n                    // v.x = options.points[i].x + 10 * scale;\r\n                    // v.y = options.points[i].y + 10 * scale;\r\n                    var ni = r * rows + ((c + d) % rows);\r\n                    var vz = (options.heightMap[ni] / 64 * groundStrength) * drc + (strength * scale);\r\n                    v.z += (vz - v.z) / (3 + 3 * (1 - drc));\r\n                });\r\n                d++;\r\n                ground.geometry.verticesNeedUpdate = true;\r\n            }\r\n        }\r\n\r\n        function loop() {\r\n            stats.begin();\r\n            render();\r\n            stats.end();\r\n            requestAnimationFrame(loop);\r\n        }\r\n\r\n        function render() {\r\n            if (controls) {\r\n                controls.update();\r\n            }\r\n            updateAnalyser();\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        function sprite() {\r\n            var canvas = document.createElement('canvas');\r\n            canvas.width = 128;\r\n            canvas.height = 128;\r\n            var ctx = canvas.getContext('2d');\r\n            var gradient = ctx.createRadialGradient(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                0,\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                canvas.width / 2\r\n            );\r\n            /*\r\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\r\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\r\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\r\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\r\n            ctx.fillStyle = gradient;\r\n            */\r\n            ctx.fillStyle = \"#000000\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n            return canvas;\r\n        }\r\n\r\n        function bufferGeometry() {\r\n            var geometry = new THREE.BufferGeometry();\r\n            // create a simple square shape. We duplicate the top left and bottom right\r\n            // vertices because each vertex needs to appear once per triangle.\r\n            var vertices = new Float32Array([-1.0, -1.0, 1.0,\r\n                1.0, -1.0, 1.0,\r\n                1.0, 1.0, 1.0,\r\n                1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0\r\n            ]);\r\n            // itemSize = 3 because there are 3 values (components) per vertex\r\n            geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n        }\r\n\r\n\r\n        createScene();\r\n        createObjects();\r\n        addNotes();\r\n        createAnalyser();\r\n        // createLights();\r\n        // addGui();        \r\n        loop();\r\n\r\n        function addNotes() {\r\n            // alert('onChange', params);\r\n            /*\r\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\r\n            */\r\n            var geometry = new THREE.Geometry();\r\n            // geometry.vertices.splice(0, geometry.vertices.length);\r\n            var points = options.points;\r\n            var i = 0,\r\n                t = points.length;\r\n            while (i < t) {\r\n                var p = points[i];\r\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\r\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\r\n                i++;\r\n            }\r\n            geometry.mergeVertices();\r\n            geometry.verticesNeedUpdate = true;\r\n            notes.geometry = geometry;\r\n            addSplines(points);\r\n        }\r\n\r\n        function addSplines(points) {\r\n            var subdivisions = 6;\r\n            var recursion = 1;\r\n            points = points.map(function(point) {\r\n                return new THREE.Vector3(point.x, point.y, point.z);\r\n            });\r\n            var spline = new THREE.CatmullRomCurve3(points);\r\n            var geometry = new THREE.Geometry();\r\n            geometry.vertices = spline.getPoints(5000);\r\n            // geometry.mergeVertices();\r\n            // geometry.verticesNeedUpdate = true;\r\n            // geometry.computeLineDistances();\r\n            // geometry.lineDistancesNeedUpdate = true;\r\n            lines.geometry = geometry;\r\n        }\r\n\r\n        var params = function GalaxyParameters() {\r\n            function GalaxyParameters() {\r\n                this.arms = 2,\r\n                    this.stops = 5000,\r\n                    this.revolutions = 1.7,\r\n                    this.radius = 400,\r\n                    this.sparse = 0.4,\r\n                    this.dispersion = 0.6, // more 0 - less 1\r\n                    this.bulge = 0.6,\r\n                    this.displayOutline = false,\r\n                    this.randomize = function() {\r\n                        // console.log('gui', gui);\r\n                        for (var i = 0; i < gui.__controllers.length; i++) {\r\n                            var c = gui.__controllers[i];\r\n                            if (c.__min) {\r\n                                var value = c.__min + (c.__max - c.__min) * Math.random();\r\n                                // console.log(value, c);\r\n                                this[c.property] = value;\r\n                                c.updateDisplay();\r\n                            }\r\n                        }\r\n                        onChange(this);\r\n                    },\r\n                    this.armTheta = function() {\r\n                        return Math.PI * 2 / this.arms;\r\n                    };\r\n                this.modulus = function() {\r\n                    return Math.pow(2, 31);\r\n                };\r\n            }\r\n            return new GalaxyParameters();\r\n        }();\r\n\r\n        function lcg(value, modulus, multiplier, increment) {\r\n            modulus = modulus || Math.pow(2, 31);\r\n            multiplier = multiplier || 1103515245;\r\n            increment = increment || 12345;\r\n            return (value * multiplier + increment) % modulus;\r\n        }\r\n\r\n        function onChange(params) {\r\n\r\n        }\r\n\r\n        function __onChange(params) {\r\n            // alert('onChange', data);\r\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\r\n            // var geometry = notes.geometry;\r\n            var geometry = new THREE.Geometry();\r\n            // geometry.vertices.splice(0, geometry.vertices.length);\r\n            var points = spiral(params).toArray();\r\n            for (var i = 0; i < points.length; i++) {\r\n                var point = points[i];\r\n                var distance = Math.pow(Math.pow(point.x, 2) + Math.pow(point.y, 2), 0.5);\r\n                var pow = Math.max(0, ((params.radius * .8) - distance) / (params.radius * .8));\r\n                pow = (1 - Math.cos(pow * Math.PI)) * params.bulge;\r\n                // console.log(distance);\r\n                var vertex = new THREE.Vector3();\r\n                vertex.x = point.x;\r\n                vertex.y = point.y;\r\n                vertex.z = (-dz + (dz * 2) * Math.random()) * pow; // (Math.random() * 180 - 90) * (pow * pow * pow);\r\n                geometry.vertices.push(vertex);\r\n                geometry.colors.push(new THREE.Color(pow, pow, 1));\r\n                var t = Math.round(pow * 5),\r\n                    n = 0;\r\n                while (n < t) {\r\n                    vertex = new THREE.Vector3();\r\n                    vertex.x = point.x - dx + Math.random() * (dx * 2);\r\n                    vertex.y = point.y - dy + Math.random() * (dy * 2);\r\n                    vertex.z = (-dz + (dz * 2) * Math.random()) * pow;\r\n                    geometry.vertices.push(vertex);\r\n                    geometry.colors.push(new THREE.Color(pow, pow, pow));\r\n                    n++;\r\n                }\r\n            }\r\n            geometry.mergeVertices();\r\n            geometry.verticesNeedUpdate = true;\r\n            notes.geometry = geometry;\r\n        }\r\n\r\n        function addGui() {\r\n            gui = new dat.GUI();\r\n            gui.closed = true;\r\n            /*\r\n            gui.add(params, 'arms', 1, 10).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'stops', 1000, 10000).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'revolutions', 1.1, 3.1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'radius', 300, 1000).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'sparse', 0.1, 1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'dispersion', 0.01, 1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'bulge', 0.01, 1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'randomize');\r\n            */\r\n            onChange(params);\r\n            return gui;\r\n        };\r\n\r\n        function spiral(params) {\r\n            return {\r\n                toArray: function(now) {\r\n                    now = now || 0;\r\n                    var time = now / -60000,\r\n                        modulus = params.modulus(),\r\n                        theta = params.armTheta();\r\n                    var points = [];\r\n                    var value = 0;\r\n                    for (var arm = 0; arm < params.arms; arm++) {\r\n                        for (var stop = 0; stop < params.stops; stop++) {\r\n                            value = lcg(value, modulus);\r\n                            var pow = (stop / params.stops),\r\n                                c = 1 - pow + 1 - params.dispersion,\r\n                                r = value / modulus,\r\n                                cr = (r - 0.5) * 2,\r\n                                angle = (pow * Math.PI * 2 * params.revolutions) + (theta * arm),\r\n                                radians = time + angle + (Math.PI * c * cr * params.sparse),\r\n                                distance = Math.sqrt(pow) * params.radius,\r\n                                x = Math.cos(radians) * distance,\r\n                                y = Math.sin(radians) * distance,\r\n                                z = 0,\r\n                                size = (r - 0.5) * 2 + Math.pow(1.125, (1 - pow) * 8),\r\n                                alpha = (Math.sin((r + time + pow) * Math.PI * 2) + 1) * 0.5;\r\n                            points.push({\r\n                                x: x,\r\n                                y: y,\r\n                                z: z,\r\n                                size: size,\r\n                                alpha: alpha,\r\n                            });\r\n                        }\r\n                    }\r\n                    return points;\r\n                },\r\n            };\r\n        }\r\n\r\n        /*\r\n\r\n        var downloadFile = (function() {\r\n            var a = document.createElement(\"a\");\r\n            document.body.appendChild(a);\r\n            a.style = \"display: none\";\r\n            return function(data, fileName, json) {\r\n                data = json ? JSON.stringify(data) : data;\r\n                var blob = new Blob([data], { type: \"octet/stream\" }),\r\n                    url = window.URL.createObjectURL(blob);\r\n                a.href = url;\r\n                a.download = fileName;\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n            };\r\n        }());\r\n\r\n        function string2ArrayBuffer(string, callback) {\r\n            var blob = new Blob([string])\r\n            var fr = new FileReader();\r\n            fr.onload = function(e) {\r\n                callback(e.target.result);\r\n            }\r\n            fr.readAsArrayBuffer(blob);\r\n        }\r\n\r\n        function PCDExporter(vertices) {\r\n            var data = '# .PCD v.7 - Point Cloud Data file format' + '\\r\\n';\r\n            data += 'VERSION .7' + '\\r\\n';\r\n            data += 'FIELDS x y z rgb' + '\\r\\n';\r\n            data += 'SIZE 4 4 4 4' + '\\r\\n';\r\n            data += 'TYPE F F F F' + '\\r\\n';\r\n            data += 'COUNT 1 1 1 1' + '\\r\\n';\r\n            data += 'WIDTH ' + vertices.length + '\\r\\n';\r\n            data += 'HEIGHT 1' + '\\r\\n';\r\n            data += 'VIEWPOINT 0 0 0 1 0 0 0' + '\\r\\n';\r\n            data += 'POINTS ' + vertices.length + '\\r\\n';\r\n            data += 'DATA ascii' + '\\r\\n';\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var v = vertices[i];\r\n                var x = v.x.toFixed(5);\r\n                var y = v.y.toFixed(5);\r\n                var z = v.z.toFixed(5);\r\n                data += x + ' ' + y + ' ' + z + ' 4.2108e+06';\r\n                if (i < vertices.length - 1) {\r\n                    data += '\\r\\n';\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        // https://cdn.rawgit.com/mikolalysenko/write-ply/master/write-ply.js\r\n        function PLYExporter(vertices) {\r\n            var model = {\r\n                vertex: {\r\n                    x: [],\r\n                    y: [],\r\n                    z: []\r\n                },\r\n                face: {\r\n                    vertex_index: []\r\n                }\r\n            };\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var v = vertices[i];\r\n                model.vertex.x.push(v.x);\r\n                model.vertex.y.push(v.y);\r\n                model.vertex.z.push(v.z);\r\n            }\r\n            var data = writePLY(model);\r\n            return data;\r\n        }\r\n        */\r\n\r\n        function addListeners() {\r\n            function handleMouseMove(event) {\r\n                mouse = { x: event.clientX, y: event.clientY };\r\n            }\r\n\r\n            function handleMouseDown(event) {\r\n                //\r\n            }\r\n\r\n            function handleMouseUp(event) {\r\n                //\r\n            }\r\n\r\n            function handleTouchStart(event) {\r\n                if (event.touches.length > 1) {\r\n                    event.preventDefault();\r\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\r\n                }\r\n            }\r\n\r\n            function handleTouchEnd(event) {\r\n                mousePos = { x: windowHalfX, y: windowHalfY };\r\n            }\r\n\r\n            function handleTouchMove(event) {\r\n                if (event.touches.length == 1) {\r\n                    event.preventDefault();\r\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\r\n                }\r\n            }\r\n\r\n            function onWindowResize() {\r\n                width = window.innerWidth;\r\n                height = window.innerHeight;\r\n                w2 = width / 2;\r\n                h2 = height / 2;\r\n                renderer.setSize(width, height);\r\n                camera.aspect = width / height;\r\n                camera.updateProjectionMatrix();\r\n            }\r\n            window.addEventListener('resize', onWindowResize, false);\r\n            document.addEventListener('mousemove', handleMouseMove, false);\r\n            document.addEventListener('mousedown', handleMouseDown, false);\r\n            document.addEventListener('mouseup', handleMouseUp, false);\r\n            document.addEventListener('touchstart', handleTouchStart, false);\r\n            document.addEventListener('touchend', handleTouchEnd, false);\r\n            document.addEventListener('touchmove', handleTouchMove, false);\r\n        }\r\n\r\n        function generateHeight(width, height) {\r\n            var size = width * height,\r\n                data = new Uint8Array(size),\r\n                perlin = new ImprovedNoise(),\r\n                quality = 1,\r\n                z = Math.random() * 100;\r\n            for (var j = 0; j < 4; j++) {\r\n                for (var i = 0; i < size; i++) {\r\n                    var x = i % width,\r\n                        y = ~~(i / width);\r\n                    data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\r\n                }\r\n                quality *= 5;\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function ImprovedNoise() {\r\n            var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\r\n                23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\r\n                174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\r\n                133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\r\n                89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\r\n                202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\r\n                248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\r\n                178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\r\n                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\r\n                93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\r\n            ];\r\n            for (var i = 0; i < 256; i++) {\r\n                p[256 + i] = p[i];\r\n            }\r\n\r\n            function fade(t) {\r\n                return t * t * t * (t * (t * 6 - 15) + 10);\r\n            }\r\n\r\n            function lerp(t, a, b) {\r\n                return a + t * (b - a);\r\n            }\r\n\r\n            function grad(hash, x, y, z) {\r\n                var h = hash & 15;\r\n                var u = h < 8 ? x : y,\r\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\r\n                return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\r\n            }\r\n\r\n            return {\r\n                noise: function(x, y, z) {\r\n                    var floorX = Math.floor(x),\r\n                        floorY = Math.floor(y),\r\n                        floorZ = Math.floor(z);\r\n                    var X = floorX & 255,\r\n                        Y = floorY & 255,\r\n                        Z = floorZ & 255;\r\n                    x -= floorX;\r\n                    y -= floorY;\r\n                    z -= floorZ;\r\n                    var xMinus1 = x - 1,\r\n                        yMinus1 = y - 1,\r\n                        zMinus1 = z - 1;\r\n                    var u = fade(x),\r\n                        v = fade(y),\r\n                        w = fade(z);\r\n                    var A = p[X] + Y,\r\n                        AA = p[A] + Z,\r\n                        AB = p[A + 1] + Z,\r\n                        B = p[X + 1] + Y,\r\n                        BA = p[B] + Z,\r\n                        BB = p[B + 1] + Z;\r\n                    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\r\n                                grad(p[BA], xMinus1, y, z)),\r\n                            lerp(u, grad(p[AB], x, yMinus1, z),\r\n                                grad(p[BB], xMinus1, yMinus1, z))),\r\n                        lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\r\n                                grad(p[BA + 1], xMinus1, y, z - 1)),\r\n                            lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\r\n                                grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\r\n\r\n                }\r\n            };\r\n        }\r\n    }]);\r\n\r\n}());"]}