{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","controller","$scope","onChange","params","renderer","setClearColor","options","colors","background","OBJECTS","circles","material","color","setHex","lines","display","add","remove","dots","createPath","spline","THREE","CatmullRomCurve3","Vector3","type","closed","object","Object3D","scene","normal","binormal","MeshLambertMaterial","wireframeMaterial","MeshBasicMaterial","opacity","wireframe","transparent","geometry","TubeBufferGeometry","group","SceneUtils","createMultiMaterialObject","animateVertexAtIndex","v","i","d","rows","audioStrength","noiseStrength","r","Math","floor","c","b","abs","dr","dc","drc","index","bands","pow","analyserData","scale","ni","level","noiseMap","z","max","getObjectDots","console","log","update","forEach","vertices","verticesNeedUpdate","PointsMaterial","size","sizeAttenuation","Geometry","Points","space","points","Array","fill","map","n","x","y","t","length","point","vertex","push","getObjectLines","line","l","LineBasicMaterial","Line","getObjectCircles","circularStrength","ai","na","noise","cpow","radius","circle","LineLoop","angle","PI","rad","cos","sin","updateAnalyser","analyser","getByteFrequencyData","loop","stats","begin","render","end","requestAnimationFrame","controls","camera","addListeners","onWindowResize","width","window","innerWidth","height","innerHeight","w2","h2","setSize","aspect","updateProjectionMatrix","addEventListener","ImprovedNoise","fade","lerp","a","grad","hash","h","u","p","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","audio","gui","fov","ratio","near","far","container","audioUrl","notes","randomize","__controllers","__min","value","__max","random","this","property","updateDisplay","__color","g","setValue","hex","data","Uint8Array","perlin","quality","j","Scene","PerspectiveCamera","position","lookAt","WebGLRenderer","alpha","antialias","shadowMap","enabled","document","getElementById","appendChild","domElement","Stats","dom","path","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","bufferLength","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","play","dat","GUI","Circles","Lines","Dots","addColor"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$httpProvider', function($httpProvider) {\r\n        // $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n\r\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\r\n        $locationProvider.html5Mode(true);\r\n        $locationProvider.hashPrefix('');\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.run(['$rootScope', function($rootScope) {\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.controller('RootCtrl', ['$scope', function($scope) {\n        var analyser, analyserData, audio;\n        var stats, gui, scene, camera, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\n        var controls = null;\n\n        var OBJECTS = {};\n\n        var options = {\n            audioUrl: \"audio/rossini-192.mp3\",\n            colors: {\n                background: 0x111111, // 0xffffff,\n                lines: 0x999999, // 0x888888,\n                notes: 0x444444, // 0xaaaaaa,\n            },\n            bands: 256,\n            rows: 128,\n            space: 10,\n            audioStrength: 60,\n            noiseStrength: 25,\n            circularStrength: 0.90,\n            display: '0',\n            randomize: function() {\n                for (var i = 0; i < gui.__controllers.length; i++) {\n                    var c = gui.__controllers[i];\n                    if (c.__min) {\n                        var value = c.__min + (c.__max - c.__min) * Math.random();\n                        this[c.property] = value;\n                        c.updateDisplay();\n                    }\n                    if (c.__color) {\n                        c.__color.r = Math.floor(Math.random() * 255);\n                        c.__color.g = Math.floor(Math.random() * 255);\n                        c.__color.b = Math.floor(Math.random() * 255);\n                        c.updateDisplay();\n                        c.setValue(c.__color.hex);\n                    }\n                }\n            }\n        };\n\n        options.points = new Array(options.bands * 2).fill(null).map(function() {\n            var r = 1000,\n                d = r * 2;\n            return new THREE.Vector3(-r + Math.random() * d, -r + Math.random() * d, -r + Math.random() * d);\n        });\n        options.noiseMap = getPerlinNoise(options.rows, options.rows);\n\n        function onChange(params) {\n            renderer.setClearColor(options.colors.background, 1);\n            if (OBJECTS.circles) {\n                OBJECTS.circles.material.color.setHex(options.colors.lines);\n                if (options.display === '0') {\n                    OBJECTS.circles.add();\n                } else {\n                    OBJECTS.circles.remove();\n                }\n            }\n            if (OBJECTS.lines) {\n                OBJECTS.lines.material.color.setHex(options.colors.lines);\n                if (options.display === '1') {\n                    OBJECTS.lines.add();\n                } else {\n                    OBJECTS.lines.remove();\n                }\n            }\n            if (OBJECTS.dots) {\n                OBJECTS.dots.material.color.setHex(options.colors.lines);\n                if (options.display === '2') {\n                    OBJECTS.dots.add();\n                } else {\n                    OBJECTS.dots.remove();\n                }\n            }\n        }\n\n        function createLights() {\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n            shadow.position.set(200, 200, 200);\n            shadow.castShadow = true;\n            // shadow.shadowDarkness = .2;\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\n            back.position.set(-100, 200, 50);\n            // back.shadowDarkness = .2;\n            back.castShadow = true;\n            scene.add(light);\n            scene.add(shadow);\n            scene.add(back);\n        }\n\n        function createScene() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            ratio = width / height;\n            w2 = width / 2;\n            h2 = height / 2;\n            fov = 60;\n            near = 1;\n            far = 20000;\n            scene = new THREE.Scene();\n            // scene.fog = new THREE.Fog(0xeeeeee, 256, 500);\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n            camera.position.z = 100;\n            camera.position.y = -500;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true\n            });\n            renderer.setSize(width, height);\n            renderer.setClearColor(options.colors.background, 1);\n            renderer.shadowMap.enabled = true;\n            container = document.getElementById('scene');\n            container.appendChild(renderer.domElement);\n\n            stats = new Stats();\n            container.appendChild(stats.dom);\n\n            addListeners();\n            // controls = new THREE.OrbitControls(camera, renderer.domElement);\n        }\n\n        function createPath() {\n            var spline = new THREE.CatmullRomCurve3([\n                new THREE.Vector3(0, -40, -40),\n                new THREE.Vector3(0, 40, -40),\n                new THREE.Vector3(0, 140, -40),\n                new THREE.Vector3(0, 40, 40),\n                new THREE.Vector3(0, -40, 40)\n            ]);\n            spline.type = 'catmullrom';\n            spline.closed = true;\n\n            var object = new THREE.Object3D();\n            scene.add(object);\n\n            var extrusionSegments = 500;\n            var radiusSegments = 12;\n            var closed = true;\n            var normal = new THREE.Vector3();\n            var binormal = new THREE.Vector3();\n            var material = new THREE.MeshLambertMaterial({\n                color: 0xff00ff\n            });\n            var wireframeMaterial = new THREE.MeshBasicMaterial({\n                color: 0x000000,\n                opacity: 0.3,\n                wireframe: true,\n                transparent: true,\n            });\n            var geometry = new THREE.TubeBufferGeometry(spline, extrusionSegments, 2, radiusSegments, closed);\n            // if (group !== undefined) {\n            //     object.remove(group);\n            //     group.children[0].geometry.dispose();\n            //     group.children[1].geometry.dispose();\n            // }            \n            var group = THREE.SceneUtils.createMultiMaterialObject(geometry, [material, wireframeMaterial]);\n            object.add(group);\n            /*\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(500);\n            var line = new MeshLine();\n            line.setGeometry(geometry);\n            // line.setGeometry( geometry, function( p ) { return 2; } ); // makes width 2 * lineWidth\n            // line.setGeometry( geometry, function( p ) { return 1 - p; } ); // makes width taper\n            // line.setGeometry( geometry, function( p ) { return 2 + Math.sin( 50 * p ); } ); // makes width sinusoidal\n            var material = new MeshLineMaterial({\n                color: new THREE.Color(0xffffff),\n                lineWidth: 4,\n            });\n            var mesh = new THREE.Mesh(line.geometry, material);\n            object.add(mesh);\n            */\n            return {\n                object: object,\n                geometry: geometry,\n                normal: normal,\n                binormal: binormal,\n            };\n        }\n\n        function moveCamera() {\n            if (!OBJECTS.path) {\n                return;\n            }\n            var duration = 20 * 1000;\n            var scale = 1;\n            var offset = 15;\n            var lookAhead = true;\n            var geometry = OBJECTS.path.geometry;\n            var normal = OBJECTS.path.normal;\n            var binormal = OBJECTS.path.binormal;\n            var msec = Date.now();\n            var pow = (msec % duration) / duration;\n            var p = geometry.parameters.path.getPointAt(pow);\n            p.multiplyScalar(scale);\n            // interpolation\n            var segments = geometry.tangents.length;\n            var progress = pow * segments;\n            var current = Math.floor(progress);\n            var next = (current + 1) % segments;\n            binormal.subVectors(geometry.binormals[next], geometry.binormals[current]);\n            binormal.multiplyScalar(progress - current).add(geometry.binormals[current]);\n            var dir = geometry.parameters.path.getTangentAt(pow);\n            normal.copy(binormal).cross(dir);\n            p.add(normal.clone().multiplyScalar(offset));\n            camera.position.copy(p);\n            var lookAt;\n            if (lookAhead) {\n                // using arclength for stablization in look ahead\n                lookAt = geometry.parameters.path.getPointAt((pow + 30 / geometry.parameters.path.getLength()) % 1).multiplyScalar(scale);\n            } else {\n                // camera orientation 2 - up orientation via normal\n                lookAt = new THREE.Vector3().copy(p).add(dir);\n            }\n            camera.matrix.lookAt(camera.position, lookAt, normal);\n            camera.rotation.setFromRotationMatrix(camera.matrix, camera.rotation.order);\n        }\n\n        function animateVertexAtIndex(v, i, d) {\n            var rows = options.rows,\n                audioStrength = options.audioStrength,\n                noiseStrength = options.noiseStrength;\n            var r = Math.floor(i / rows);\n            var c = i - r * rows;\n            var b = Math.abs(c - rows / 2) * 2;\n            var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n            var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n            var drc = (dr + dc) / 2;\n            var index = b % options.bands;\n            var pow = analyserData[index];\n            var scale = (pow / options.bands) * dr * 2;\n            var ni = r * rows + ((c + d) % rows);\n            var level = (options.noiseMap[ni] / 64 * noiseStrength) * drc + (audioStrength * scale);\n            v.z += (level - v.z) / (3 + 3 * Math.max(0.000001, 1 - drc));\n        }\n\n        function getObjectDots() {\n            var material = new THREE.PointsMaterial({\n                color: options.colors.lines,\n                size: 1,\n                sizeAttenuation: false,\n                // vertexColors: THREE.VertexColors,\n            });\n            var geometry = new THREE.Geometry();\n            var object = new THREE.Points(geometry, material);\n            var rows = options.rows,\n                space = options.space;\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                return {\n                    x: -(space * rows / 2) + space * c,\n                    y: -(space * rows / 2) + space * r,\n                    z: 0,\n                };\n            });\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var point = points[i];\n                var vertex = new THREE.Vector3();\n                vertex.x = point.x;\n                vertex.y = point.y;\n                vertex.z = point.z;\n                geometry.vertices.push(vertex);\n                // geometry.colors.push(new THREE.Color(0xffcc00));\n                i++;\n            }\n            // geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            object.geometry = geometry;\n\n            function add() {\n                console.log('OBJECTS.dots.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.dots.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                d++;\n                geometry.verticesNeedUpdate = true;\n            }\n\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        function getObjectLines() {\n            var object, material, lines = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            var rows = options.rows,\n                space = options.space;\n            while (lines.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var line = new THREE.Line(geometry, material);\n                line.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // line.spline = spline;\n                lines.push(line);\n                object.add(line);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                var point = new THREE.Vector3(-(space * rows / 2) + space * c, -(space * rows / 2) + space * r,\n                    0\n                );\n                lines[c].points[r] = point;\n                lines[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            function add() {\n                console.log('OBJECTS.lines.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.lines.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength;\n                angular.forEach(points, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                angular.forEach(lines, function(line, l) {\n                    // var points = line.points;\n                    // var spline = line.spline;\n                    // spline.getPoints(rows * 2);\n                    // line.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    line.geometry.verticesNeedUpdate = true;\n                });\n                d++;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        function getObjectCircles() {\n            var object, material, circles = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            var rows = options.rows,\n                space = options.space;\n            while (circles.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var circle = new THREE.LineLoop(geometry, material);\n                circle.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                circles.push(circle);\n                object.add(circle);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var angle = 2 * Math.PI / rows;\n                var rad = angle * r + angle * c * 0.1;\n                var point = new THREE.Vector3();\n                point.r = {\n                    x: Math.cos(rad),\n                    y: Math.sin(rad),\n                    z: 96 + (c * c * c * 0.0001),\n                };\n                circles[c].points[r] = point;\n                circles[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            function add() {\n                console.log('OBJECTS.circles.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.circles.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    audioStrength = options.audioStrength,\n                    noiseStrength = options.noiseStrength,\n                    circularStrength = options.circularStrength;\n                angular.forEach(points, function(v, i) {\n                    // animateVertexAtIndex(v, i, d);\n                    var r = Math.floor(i / rows);\n                    var c = i - r * rows;\n                    var b = Math.abs(c - rows / 2) * 2;\n                    var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                    var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                    var drc = (dr + dc) / 2;\n                    var ai = r % options.bands;\n                    var pow = (analyserData[ai] + analyserData[rows - 1 - ai]) / 2;\n                    var scale = pow / options.bands;\n                    var na = c * rows + ((r + d) % rows);\n                    var noise = options.noiseMap[na];\n                    var cpow = 1 - ((rows - c) / rows * circularStrength);\n                    var level = v.r.z + (noise / 64 * noiseStrength) * cpow + (audioStrength * 2 * scale * scale) * cpow;\n                    var radius = v.radius || level;\n                    radius += (level - radius) / 2;\n                    v.x = v.r.x * radius;\n                    v.y = -c;\n                    v.z = v.r.y * radius;\n                    v.radius = radius;\n                });\n                angular.forEach(circles, function(circle, l) {\n                    // var points = circle.points;\n                    // var spline = circle.spline;\n                    // spline.getPoints(rows * 2);\n                    // circle.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    circle.geometry.verticesNeedUpdate = true;\n                });\n                d++;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        /*\n        function getNotes() {\n            var object, geometry, material;\n            geometry = new THREE.Geometry();\n            texture = new THREE.CanvasTexture(getSprite());\n            material = new THREE.PointsMaterial({\n                size: 12,\n                map: texture,\n                vertexColors: THREE.VertexColors,\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent: true\n            });\n            material = new THREE.PointsMaterial({\n                color: options.colors.notes,\n                size: 2,\n                sizeAttenuation: false,\n            });\n            object = new THREE.Points(geometry, material);\n\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n\n            function add() {\n                console.log('OBJECTS.notes.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.notes.remove');\n                scene.remove(object);\n            }\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    var index = i % options.bands;\n                    var pow = analyserData[index];\n                    var scale = (pow / options.bands) * 2;\n                    var p = options.points[i];\n                    var vx = p.x * (1 + scale);\n                    var vy = p.y * (1 + scale);\n                    var vz = p.z * (1 + scale);\n                    v.x += (vx - v.x) / 3;\n                    v.y += (vy - v.y) / 3;\n                    v.z += (vz - v.z) / 3;\n                });\n                geometry.verticesNeedUpdate = true;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n\n        function getLines() {\n            var object, geometry, material;\n\n            geometry = new THREE.Geometry();\n            material = new THREE.LineDashedMaterial({\n                color: options.colors.lines,\n                dashSize: 1,\n                gapSize: 0.5,\n            });\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Line(geometry, material);\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            function update() {\n\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n        */\n        function createObjects() {\n            OBJECTS.dots = getObjectDots();\n            OBJECTS.lines = getObjectLines();\n            OBJECTS.circles = getObjectCircles();\n            // OBJECTS.notes = getNotes();\n            OBJECTS.path = createPath();\n        }\n\n        function createAnalyser() {\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n            source = null;\n            ctx = new actx();\n            analyser = ctx.createAnalyser();\n            audio = new Audio();\n            audio.src = options.audioUrl;\n            audio.controls = true;\n            audio.addEventListener('canplay', function() {\n                var bufferLength;\n                console.log('audio canplay');\n                source = ctx.createMediaElementSource(audio);\n                source.connect(analyser);\n                source.connect(ctx.destination);\n                analyser.fftSize = options.bands * 2;\n                bufferLength = analyser.frequencyBinCount;\n                console.log('bufferLength', bufferLength);\n                analyserData = new Uint8Array(bufferLength);\n                return analyserData;\n            });\n            return audio.play();\n        }\n\n        function updateAnalyser() {\n            // notes.rotation.z -= 0.0025;\n            // lines.rotation.z -= 0.0025;            \n            if (analyserData) {\n                analyser.getByteFrequencyData(analyserData);\n                if (options.display === '0') {\n                    OBJECTS.circles.update();\n                } else if (options.display === '1') {\n                    OBJECTS.lines.update();\n                } else if (options.display === '2') {\n                    OBJECTS.dots.update();\n                }\n                // OBJECTS.notes.update();\n            }\n        }\n\n        function loop() {\n            stats.begin();\n            render();\n            stats.end();\n            requestAnimationFrame(loop);\n        }\n\n        function render() {\n            if (controls) {\n                controls.update();\n            }\n            // moveCamera();\n            updateAnalyser();\n            renderer.render(scene, camera);\n        }\n\n        createScene();\n        createObjects();\n        // addNotes();\n        createAnalyser();\n        // createLights();\n        addGui();\n        onChange();\n        loop();\n\n        function addNotes() {\n            // alert('onChange', params);\n            /*\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\n            */\n            var geometry = new THREE.Geometry();\n            // geometry.vertices.splice(0, geometry.vertices.length);\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            notes.geometry = geometry;\n            addSplines(points);\n        }\n\n        function addSplines(points) {\n            points = points.map(function(point) {\n                return new THREE.Vector3(point.x, point.y, point.z);\n            });\n            var spline = new THREE.CatmullRomCurve3(points);\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(5000);\n            // geometry.mergeVertices();\n            // geometry.verticesNeedUpdate = true;\n            // geometry.computeLineDistances();\n            // geometry.lineDistancesNeedUpdate = true;\n            lines.geometry = geometry;\n        }\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.add(options, 'display', { Circles: 0, Lines: 1, Dots: 2 }).onChange(onChange);\n            gui.addColor(options.colors, 'background').onChange(onChange);\n            gui.addColor(options.colors, 'lines').onChange(onChange);\n            gui.add(options, 'audioStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'noiseStrength', 10, 100).onChange(onChange);\n            gui.add(options, 'circularStrength', 0.01, 0.90).onChange(onChange);\n            gui.add(options, 'randomize');\n            return gui;\n        }\n\n        function addListeners() {\n            function handleMouseMove(event) {\n                mouse = { x: event.clientX, y: event.clientY };\n            }\n\n            function handleMouseDown(event) {\n                //\n            }\n\n            function handleMouseUp(event) {\n                //\n            }\n\n            function handleTouchStart(event) {\n                if (event.touches.length > 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function handleTouchEnd(event) {\n                mousePos = { x: windowHalfX, y: windowHalfY };\n            }\n\n            function handleTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                w2 = width / 2;\n                h2 = height / 2;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener('resize', onWindowResize, false);\n            /*\n            document.addEventListener('mousemove', handleMouseMove, false);\n            document.addEventListener('mousedown', handleMouseDown, false);\n            document.addEventListener('mouseup', handleMouseUp, false);\n            document.addEventListener('touchstart', handleTouchStart, false);\n            document.addEventListener('touchend', handleTouchEnd, false);\n            document.addEventListener('touchmove', handleTouchMove, false);\n            */\n        }\n\n        function getSprite() {\n            var canvas = document.createElement('canvas');\n            canvas.width = 128;\n            canvas.height = 128;\n            var ctx = canvas.getContext('2d');\n            var gradient = ctx.createRadialGradient(\n                canvas.width / 2,\n                canvas.height / 2,\n                0,\n                canvas.width / 2,\n                canvas.height / 2,\n                canvas.width / 2\n            );\n            /*\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\n            ctx.fillStyle = gradient;\n            */\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            return canvas;\n        }\n\n        function getPerlinNoise(width, height) {\n            var size = width * height,\n                data = new Uint8Array(size),\n                perlin = new ImprovedNoise(),\n                quality = 1,\n                z = Math.random() * 100;\n            for (var j = 0; j < 4; j++) {\n                for (var i = 0; i < size; i++) {\n                    var x = i % width,\n                        y = ~~(i / width);\n                    data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n                }\n                quality *= 5;\n            }\n            return data;\n        }\n\n        function ImprovedNoise() {\n            var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n                23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n                174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n                133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n                89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n                202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n                248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n                178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n                93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (var i = 0; i < 256; i++) {\n                p[256 + i] = p[i];\n            }\n\n            function fade(t) {\n                return t * t * t * (t * (t * 6 - 15) + 10);\n            }\n\n            function lerp(t, a, b) {\n                return a + t * (b - a);\n            }\n\n            function grad(hash, x, y, z) {\n                var h = hash & 15;\n                var u = h < 8 ? x : y,\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n                return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n            }\n\n            return {\n                noise: function(x, y, z) {\n                    var floorX = Math.floor(x),\n                        floorY = Math.floor(y),\n                        floorZ = Math.floor(z);\n                    var X = floorX & 255,\n                        Y = floorY & 255,\n                        Z = floorZ & 255;\n                    x -= floorX;\n                    y -= floorY;\n                    z -= floorZ;\n                    var xMinus1 = x - 1,\n                        yMinus1 = y - 1,\n                        zMinus1 = z - 1;\n                    var u = fade(x),\n                        v = fade(y),\n                        w = fade(z);\n                    var A = p[X] + Y,\n                        AA = p[A] + Z,\n                        AB = p[A + 1] + Z,\n                        B = p[X + 1] + Y,\n                        BA = p[B] + Z,\n                        BB = p[B + 1] + Z;\n                    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n                                grad(p[BA], xMinus1, y, z)),\n                            lerp(u, grad(p[AB], x, yMinus1, z),\n                                grad(p[BB], xMinus1, yMinus1, z))),\n                        lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n                                grad(p[BA + 1], xMinus1, y, z - 1)),\n                            lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n                                grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n                }\n            };\n        }\n    }]);\n\n}());"]}