{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","controller","$scope","onChange","params","renderer","setClearColor","options","colors","background","OBJECTS","circles","material","color","setHex","lines","display","add","remove","dots","animateVertexAtIndex","v","i","d","rows","strength","noiseStrength","r","Math","floor","c","b","abs","dr","dc","drc","index","bands","pow","analyserData","scale","ni","level","noiseMap","z","max","getObjectDots","console","log","scene","object","update","forEach","geometry","vertices","verticesNeedUpdate","THREE","PointsMaterial","size","sizeAttenuation","Geometry","Points","space","points","Array","fill","map","n","x","y","t","length","point","vertex","Vector3","push","getObjectLines","line","l","LineBasicMaterial","Object3D","Line","getObjectCircles","ai","na","noise","angle","PI","radius","cos","sin","circle","LineLoop","updateAnalyser","analyser","getByteFrequencyData","loop","stats","begin","render","end","requestAnimationFrame","controls","camera","addListeners","handleMouseMove","event","mouse","clientX","clientY","handleMouseDown","handleMouseUp","handleTouchStart","touches","preventDefault","mousePos","pageX","pageY","handleTouchEnd","windowHalfX","windowHalfY","handleTouchMove","onWindowResize","width","window","innerWidth","height","innerHeight","w2","h2","setSize","aspect","updateProjectionMatrix","addEventListener","document","ImprovedNoise","fade","lerp","a","grad","hash","h","u","p","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","w","A","AA","AB","B","BA","BB","audio","gui","fov","ratio","near","far","container","audioUrl","notes","displayLines","randomize","__controllers","__min","value","__max","random","this","property","updateDisplay","__color","g","setValue","hex","data","Uint8Array","perlin","quality","j","Scene","PerspectiveCamera","position","lookAt","WebGLRenderer","alpha","antialias","shadowMap","enabled","getElementById","appendChild","domElement","Stats","dom","OrbitControls","source","ctx","actx","AudioContext","webkitAudioContext","createAnalyser","Audio","src","bufferLength","createMediaElementSource","connect","destination","fftSize","frequencyBinCount","play","dat","GUI","closed","addColor","Circles","Lines","Dots"],"mappings":"CAEC,WACG,YAEUA,SAAQC,OAAO,OAAQ,UAAW,qBAK/C,WACG,YAEUD,SAAQC,OAAO,OAErBC,QAAQ,gBAAiB,SAASC,UAOzC,WACG,YAEUH,SAAQC,OAAO,OAErBC,QAAQ,oBAAqB,SAASE,GAGtCA,EAAkBC,WAAU,GAC5BD,EAAkBE,WAAW,UAOpC,WACG,YAEUN,SAAQC,OAAO,OAErBM,KAAK,aAAc,SAASC,UAOnC,WACG,YAEUR,SAAQC,OAAO,OAErBQ,WAAW,YAAa,SAAU,SAASC,GA8C3C,QAASC,GAASC,GACdC,EAASC,cAAcC,EAAQC,OAAOC,WAAY,GAC9CC,EAAQC,UACRD,EAAQC,QAAQC,SAASC,MAAMC,OAAOP,EAAQC,OAAOO,OAC7B,MAApBR,EAAQS,QACRN,EAAQC,QAAQM,MAEhBP,EAAQC,QAAQO,UAGpBR,EAAQK,QACRL,EAAQK,MAAMH,SAASC,MAAMC,OAAOP,EAAQC,OAAOO,OAC3B,MAApBR,EAAQS,QACRN,EAAQK,MAAME,MAEdP,EAAQK,MAAMG,UAGlBR,EAAQS,OACRT,EAAQS,KAAKP,SAASC,MAAMC,OAAOP,EAAQC,OAAOO,OAC1B,MAApBR,EAAQS,QACRN,EAAQS,KAAKF,MAEbP,EAAQS,KAAKD,UAoDzB,QAASE,GAAqBC,EAAGC,EAAGC,GAChC,GAAIC,GAAOjB,EAAQiB,KACfC,EAAWlB,EAAQkB,SACnBC,EAAgBnB,EAAQmB,cACxBC,EAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,EACZO,EAA6B,EAAzBH,KAAKI,IAAIF,EAAIN,EAAO,GACxBS,EAAK,EAAKL,KAAKI,IAAIL,EAAIH,EAAO,IAAMA,EAAO,GAC3CU,EAAK,EAAKN,KAAKI,IAAIF,EAAIN,EAAO,IAAMA,EAAO,GAC3CW,GAAOF,EAAKC,GAAM,EAClBE,EAAQL,EAAIxB,EAAQ8B,MACpBC,EAAMC,EAAaH,GACnBI,EAASF,EAAM/B,EAAQ8B,MAASJ,EAAK,EACrCQ,EAAKd,EAAIH,GAASM,EAAIP,GAAKC,EAC3BkB,EAASnC,EAAQoC,SAASF,GAAM,GAAKf,EAAiBS,EAAOV,EAAWe,CAC5EnB,GAAEuB,IAAMF,EAAQrB,EAAEuB,IAAM,EAAI,EAAIhB,KAAKiB,IAAI,KAAU,EAAIV,IAG3D,QAASW,KAwCL,QAAS7B,KACL8B,QAAQC,IAAI,oBACZC,EAAMhC,IAAIiC,GAGd,QAAShC,KACL6B,QAAQC,IAAI,uBACZC,EAAM/B,OAAOgC,GAKjB,QAASC,KACL3D,QAAQ4D,QAAQC,EAASC,SAAU,SAASjC,EAAGC,GAC3CF,EAAqBC,EAAGC,EAAGC,KAE/BA,IACA8B,EAASE,oBAAqB,EA/BlC,IAzBA,GAAI3C,GAAW,GAAI4C,OAAMC,gBACrB5C,MAAON,EAAQC,OAAOO,MACtB2C,KAAM,EACNC,iBAAiB,IAGjBN,EAAW,GAAIG,OAAMI,SACrBV,EAAS,GAAIM,OAAMK,OAAOR,EAAUzC,GACpCY,EAAOjB,EAAQiB,KACfsC,EAAQvD,EAAQuD,MAChBC,EAAS,GAAIC,OAAMxC,EAAOA,GAAMyC,KAAK,MAAMC,IAAI,SAASC,EAAG7C,GAC3D,GAAIK,GAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,CAKhB,OAJcI,MAAKI,IAAIL,EAAIH,EAAO,GACpBI,KAAKI,IAAIF,EAAIN,EAAO,IAI9B4C,GAAKN,EAAQtC,EAAO,EAAKsC,EAAQhC,EACjCuC,GAAKP,EAAQtC,EAAO,EAAKsC,EAAQnC,EACjCiB,EAAG,KAGPtB,EAAI,EACJgD,EAAIP,EAAOQ,OACRjD,EAAIgD,GAAG,CACV,GAAIE,GAAQT,EAAOzC,GACfmD,EAAS,GAAIjB,OAAMkB,OACvBD,GAAOL,EAAII,EAAMJ,EACjBK,EAAOJ,EAAIG,EAAMH,EACjBI,EAAO7B,EAAI4B,EAAM5B,EACjBS,EAASC,SAASqB,KAAKF,GAEvBnD,IAGJ+B,EAASE,oBAAqB,EAC9BL,EAAOG,SAAWA,CAYlB,IAAI9B,GAAI,CAUR,QACIN,IAAKA,EACLC,OAAQA,EACRiC,OAAQA,EACRD,OAAQA,EACRtC,SAAUA,GAIlB,QAASgE,KAgCL,QAAS3D,KACL8B,QAAQC,IAAI,qBACZC,EAAMhC,IAAIiC,GAGd,QAAShC,KACL6B,QAAQC,IAAI,wBACZC,EAAM/B,OAAOgC,GAKjB,QAASC,KACM5C,EAAQiB,KACJjB,EAAQkB,SACHlB,EAAQmB,cAC5BlC,QAAQ4D,QAAQW,EAAQ,SAAS1C,EAAGC,GAChCF,EAAqBC,EAAGC,EAAGC,KAE/B/B,QAAQ4D,QAAQrC,EAAO,SAAS8D,EAAMC,GAOlCD,EAAKxB,SAASE,oBAAqB,IAEvChC,IA3DJ,GAAI2B,GAAQtC,EAAUG,IACtBH,GAAW,GAAI4C,OAAMuB,mBACjBlE,MAAON,EAAQC,OAAOO,QAE1BmC,EAAS,GAAIM,OAAMwB,QAGnB,KAFA,GAAIxD,GAAOjB,EAAQiB,KACfsC,EAAQvD,EAAQuD,MACb/C,EAAMwD,OAAShE,EAAQiB,MAAM,CAChC,GAAI6B,GAAW,GAAIG,OAAMI,SACrBiB,EAAO,GAAIrB,OAAMyB,KAAK5B,EAAUzC,EACpCiE,GAAKd,OAAS,GAAIC,OAAMxC,GAAMyC,KAAK,MAGnClD,EAAM4D,KAAKE,GACX3B,EAAOjC,IAAI4D,GAEf,GAAId,GAAS,GAAIC,OAAMxC,EAAOA,GAAMyC,KAAK,MAAMC,IAAI,SAASC,EAAG7C,GAC3D,GAAIK,GAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,EAKZgD,GAJU5C,KAAKI,IAAIL,EAAIH,EAAO,GACpBI,KAAKI,IAAIF,EAAIN,EAAO,GAGtB,GAAIgC,OAAMkB,SAAUZ,EAAQtC,EAAO,EAAKsC,EAAQhC,GAAKgC,EAAQtC,EAAO,EAAKsC,EAAQnC,EACzF,GAIJ,OAFAZ,GAAMe,GAAGiC,OAAOpC,GAAK6C,EACrBzD,EAAMe,GAAGuB,SAASC,SAASqB,KAAKH,GACzBA,IAaPjD,EAAI,CAoBR,QACIN,IAAKA,EACLC,OAAQA,EACRiC,OAAQA,EACRD,OAAQA,EACRtC,SAAUA,GAIlB,QAASsE,KA0BL,QAASjE,KACL8B,QAAQC,IAAI,uBACZC,EAAMhC,IAAIiC,GAGd,QAAShC,KACL6B,QAAQC,IAAI,0BACZC,EAAM/B,OAAOgC,GAKjB,QAASC,KACL,GAAI3B,GAAOjB,EAAQiB,KACfC,EAAWlB,EAAQkB,SACnBC,EAAgBnB,EAAQmB,aAC5BlC,SAAQ4D,QAAQW,EAAQ,SAAS1C,EAAGC,GAEhC,GAAIK,GAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,EAKZ2D,GAJIvD,KAAKI,IAAIF,EAAIN,EAAO,GACdI,KAAKI,IAAIL,EAAIH,EAAO,GACpBI,KAAKI,IAAIF,EAAIN,EAAO,GAEzBG,EAAIpB,EAAQ8B,OACjBC,GAAOC,EAAa4C,GAAM5C,EAAaf,EAAO,EAAI2D,IAAO,EACzD3C,EAAQF,EAAM/B,EAAQ8B,MACtB+C,EAAKtD,EAAIN,GAASG,EAAIJ,GAAKC,EAC3B6D,EAAQ9E,EAAQoC,SAASyC,GACzB1C,EAAQ,GAAKZ,EAAKuD,EAAQ,GAAK3D,EAAkBD,EAAWe,EAC5D8C,EAAQ,EAAI1D,KAAK2D,GAAK/D,EAAOG,EAC7B6D,EAASnE,EAAEmE,QAAU9C,CACzB8C,KAAW9C,EAAQ8C,GAAU,EAC7BnE,EAAE+C,EAAIxC,KAAK6D,IAAIH,GAASE,EACxBnE,EAAEgD,EAAI,EACNhD,EAAEuB,EAAIhB,KAAK8D,IAAIJ,GAASE,EACxBnE,EAAEmE,OAASA,IAEfhG,QAAQ4D,QAAQzC,EAAS,SAASgF,EAAQb,GAOtCa,EAAOtC,SAASE,oBAAqB,IAEzChC,IAxEJ,GAAI2B,GAAQtC,EAAUD,IACtBC,GAAW,GAAI4C,OAAMuB,mBACjBlE,MAAON,EAAQC,OAAOO,QAE1BmC,EAAS,GAAIM,OAAMwB,QACnB,IAAIxD,GAAOjB,EAAQiB,IAEnB,KADYjB,EAAQuD,MACbnD,EAAQ4D,OAAShE,EAAQiB,MAAM,CAClC,GAAI6B,GAAW,GAAIG,OAAMI,SACrB+B,EAAS,GAAInC,OAAMoC,SAASvC,EAAUzC,EAC1C+E,GAAO5B,OAAS,GAAIC,OAAMxC,GAAMyC,KAAK,MAGrCtD,EAAQgE,KAAKgB,GACbzC,EAAOjC,IAAI0E,GAEf,GAAI5B,GAAS,GAAIC,OAAMxC,EAAOA,GAAMyC,KAAK,MAAMC,IAAI,SAASC,EAAG7C,GAC3D,GAAIkD,GAAQ,GAAIhB,OAAMkB,QAClB/C,EAAIC,KAAKC,MAAMP,EAAIE,GACnBM,EAAIR,EAAIK,EAAIH,CAGhB,OAFAb,GAAQmB,GAAGiC,OAAOpC,GAAK6C,EACvB7D,EAAQmB,GAAGuB,SAASC,SAASqB,KAAKH,GAC3BA,IAaPjD,EAAI,CAuCR,QACIN,IAAKA,EACLC,OAAQA,EACRiC,OAAQA,EACRD,OAAQA,EACRtC,SAAUA,GAsIlB,QAASiF,KAGDtD,IACAuD,EAASC,qBAAqBxD,GACN,MAApBhC,EAAQS,QACRN,EAAQC,QAAQwC,SACW,MAApB5C,EAAQS,QACfN,EAAQK,MAAMoC,SACa,MAApB5C,EAAQS,SACfN,EAAQS,KAAKgC,UAMzB,QAAS6C,KACLC,EAAMC,QACNC,IACAF,EAAMG,MACNC,sBAAsBL,GAG1B,QAASG,KACDG,GACAA,EAASnD,SAEb0C,IACAxF,EAAS8F,OAAOlD,EAAOsD,GA+D3B,QAASC,KACL,QAASC,GAAgBC,GACrBC,GAAUvC,EAAGsC,EAAME,QAASvC,EAAGqC,EAAMG,SAGzC,QAASC,GAAgBJ,IAIzB,QAASK,GAAcL,IAIvB,QAASM,GAAiBN,GAClBA,EAAMO,QAAQ1C,OAAS,IACvBmC,EAAMQ,iBACNC,UAAa/C,EAAGsC,EAAMO,QAAQ,GAAGG,MAAO/C,EAAGqC,EAAMO,QAAQ,GAAGI,QAIpE,QAASC,GAAeZ,GACpBS,UAAa/C,EAAGmD,YAAalD,EAAGmD,aAGpC,QAASC,GAAgBf,GACO,GAAxBA,EAAMO,QAAQ1C,SACdmC,EAAMQ,iBACNC,UAAa/C,EAAGsC,EAAMO,QAAQ,GAAGG,MAAO/C,EAAGqC,EAAMO,QAAQ,GAAGI,QAIpE,QAASK,KACLC,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAChBC,EAAKL,EAAQ,EACbM,EAAKH,EAAS,EACdzH,EAAS6H,QAAQP,EAAOG,GACxBvB,EAAO4B,OAASR,EAAQG,EACxBvB,EAAO6B,yBAEXR,OAAOS,iBAAiB,SAAUX,GAAgB,GAClDY,SAASD,iBAAiB,YAAa5B,GAAiB,GACxD6B,SAASD,iBAAiB,YAAavB,GAAiB,GACxDwB,SAASD,iBAAiB,UAAWtB,GAAe,GACpDuB,SAASD,iBAAiB,aAAcrB,GAAkB,GAC1DsB,SAASD,iBAAiB,WAAYf,GAAgB,GACtDgB,SAASD,iBAAiB,YAAaZ,GAAiB,GA6C5D,QAASc,KAgBL,QAASC,GAAKlE,GACV,MAAOA,GAAIA,EAAIA,GAAKA,GAAS,EAAJA,EAAQ,IAAM,IAG3C,QAASmE,GAAKnE,EAAGoE,EAAG3G,GAChB,MAAO2G,GAAIpE,GAAKvC,EAAI2G,GAGxB,QAASC,GAAKC,EAAMxE,EAAGC,EAAGzB,GACtB,GAAIiG,GAAW,GAAPD,EACJE,EAAID,EAAI,EAAIzE,EAAIC,EAChBhD,EAAIwH,EAAI,EAAIxE,EAAS,IAALwE,GAAgB,IAALA,EAAUzE,EAAIxB,CAC7C,QAAmB,IAAN,EAAJiG,GAAcC,GAAKA,IAAiB,IAAN,EAAJD,GAAcxH,GAAKA,GAhB1D,IAAK,GAXD0H,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,EAAG,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,EAAG,GAAI,GAAI,IAAK,GAAI,GAC3H,GAAI,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GACvH,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,IACpH,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,IAAK,IACpH,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,EACtH,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IACnH,IAAK,IAAK,EAAG,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IACtH,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IACnH,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IACrH,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,IAAK,KAEnEzH,EAAI,EAAGA,EAAI,IAAKA,IACrByH,EAAE,IAAMzH,GAAKyH,EAAEzH,EAkBnB,QACI+D,MAAO,SAASjB,EAAGC,EAAGzB,GAClB,GAAIoG,GAASpH,KAAKC,MAAMuC,GACpB6E,EAASrH,KAAKC,MAAMwC,GACpB6E,EAAStH,KAAKC,MAAMe,GACpBuG,EAAa,IAATH,EACJI,EAAa,IAATH,EACJI,EAAa,IAATH,CACR9E,IAAK4E,EACL3E,GAAK4E,EACLrG,GAAKsG,CACL,IAAII,GAAUlF,EAAI,EACdmF,EAAUlF,EAAI,EACdmF,EAAU5G,EAAI,EACdkG,EAAIN,EAAKpE,GACT/C,EAAImH,EAAKnE,GACToF,EAAIjB,EAAK5F,GACT8G,EAAIX,EAAEI,GAAKC,EACXO,EAAKZ,EAAEW,GAAKL,EACZO,EAAKb,EAAEW,EAAI,GAAKL,EAChBQ,EAAId,EAAEI,EAAI,GAAKC,EACfU,EAAKf,EAAEc,GAAKR,EACZU,EAAKhB,EAAEc,EAAI,GAAKR,CACpB,OAAOZ,GAAKgB,EAAGhB,EAAKpH,EAAGoH,EAAKK,EAAGH,EAAKI,EAAEY,GAAKvF,EAAGC,EAAGzB,GACrC+F,EAAKI,EAAEe,GAAKR,EAASjF,EAAGzB,IAC5B6F,EAAKK,EAAGH,EAAKI,EAAEa,GAAKxF,EAAGmF,EAAS3G,GAC5B+F,EAAKI,EAAEgB,GAAKT,EAASC,EAAS3G,KACtC6F,EAAKpH,EAAGoH,EAAKK,EAAGH,EAAKI,EAAEY,EAAK,GAAIvF,EAAGC,EAAGmF,GAC9Bb,EAAKI,EAAEe,EAAK,GAAIR,EAASjF,EAAGzB,EAAI,IACpC6F,EAAKK,EAAGH,EAAKI,EAAEa,EAAK,GAAIxF,EAAGmF,EAASC,GAChCb,EAAKI,EAAEgB,EAAK,GAAIT,EAASC,EAASC,QA/tB1D,GAAI1D,GAAUvD,EAAcyH,EACxB/D,EAAOgE,EAAKhH,EAAOsD,EAAQD,EAAU4D,EAAKC,EAAOC,EAAMC,EAA0BhK,EAAUiK,EAAW3C,EAAOG,EAAQE,EAAIC,EAAItB,GAAUvC,EAAG,EAAGC,EAAG,GAEhJ3D,KAEAH,GACAgK,SAAU,wBACV/J,QACIC,WAAY,QACZM,MAAO,SACPyJ,MAAO,SAEXnI,MAAO,IACPb,KAAM,IACNsC,MAAO,GACPrC,SAAU,GACVC,cAAe,GACf+I,cAAc,EACdzJ,QAAS,IACT0J,UAAW,WACP,IAAK,GAAIpJ,GAAI,EAAGA,EAAI2I,EAAIU,cAAcpG,OAAQjD,IAAK,CAC/C,GAAIQ,GAAImI,EAAIU,cAAcrJ,EAC1B,IAAIQ,EAAE8I,MAAO,CACT,GAAIC,GAAQ/I,EAAE8I,OAAS9I,EAAEgJ,MAAQhJ,EAAE8I,OAAShJ,KAAKmJ,QACjDC,MAAKlJ,EAAEmJ,UAAYJ,EACnB/I,EAAEoJ,gBAEFpJ,EAAEqJ,UACFrJ,EAAEqJ,QAAQxJ,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKmJ,UAC9BjJ,EAAEqJ,QAAQC,EAAIxJ,KAAKC,MAAsB,IAAhBD,KAAKmJ,UAC9BjJ,EAAEqJ,QAAQpJ,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKmJ,UAC9BjJ,EAAEoJ,gBACFpJ,EAAEuJ,SAASvJ,EAAEqJ,QAAQG,QAMrC/K,GAAQwD,OAAS,GAAIC,OAAsB,EAAhBzD,EAAQ8B,OAAW4B,KAAK,MAAMC,IAAI,WACzD,GAAIvC,GAAI,GAER,OAAO,IAAI6B,OAAMkB,SAAS/C,EADlBA,IACsBC,KAAKmJ,UAAepJ,EAD1CA,IAC8CC,KAAKmJ,UAAepJ,EADlEA,IACsEC,KAAKmJ,YAEvFxK,EAAQoC,SAsmBR,SAAwBgF,EAAOG,GAM3B,IAAK,GALDpE,GAAOiE,EAAQG,EACfyD,EAAO,GAAIC,YAAW9H,GACtB+H,EAAS,GAAIlD,GACbmD,EAAU,EACV9I,EAAoB,IAAhBhB,KAAKmJ,SACJY,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAK,GAAIrK,GAAI,EAAGA,EAAIoC,EAAMpC,IAAK,CAC3B,GAAI8C,GAAI9C,EAAIqG,EACRtD,KAAO/C,EAAIqG,EACf4D,GAAKjK,IAAMM,KAAKI,IAAIyJ,EAAOpG,MAAMjB,EAAIsH,EAASrH,EAAIqH,EAAS9I,GAAK8I,EAAU,MAE9EA,GAAW,EAEf,MAAOH,IApnBuBhL,EAAQiB,KAAMjB,EAAQiB,MA6CxD,WACImG,EAAQC,OAAOC,WACfC,EAASF,OAAOG,YAChBoC,EAAQxC,EAAQG,EAChBE,EAAKL,EAAQ,EACbM,EAAKH,EAAS,EACdoC,EAAM,GACNE,EAAO,EACPC,EAAM,IACNpH,EAAQ,GAAIO,OAAMoI,MAElBrF,EAAS,GAAI/C,OAAMqI,kBAAkB3B,EAAKC,EAAOC,EAAMC,GACvD9D,EAAOuF,SAASlJ,EAAI,IACpB2D,EAAOuF,SAASzH,GAAK,IACrBkC,EAAOwF,OAAO,GAAIvI,OAAMkB,QAAQ,EAAG,EAAG,IACtCrE,EAAW,GAAImD,OAAMwI,eACjBC,OAAO,EACPC,WAAW,IAEf7L,EAAS6H,QAAQP,EAAOG,GACxBzH,EAASC,cAAcC,EAAQC,OAAOC,WAAY,GAClDJ,EAAS8L,UAAUC,SAAU,EAC7B9B,EAAYhC,SAAS+D,eAAe,SACpC/B,EAAUgC,YAAYjM,EAASkM,YAE/BtG,EAAQ,GAAIuG,OACZlC,EAAUgC,YAAYrG,EAAMwG,KAE5BjG,IACAF,EAAW,GAAI9C,OAAMkJ,cAAcnG,EAAQlG,EAASkM,eAyVxD,WACI7L,EAAQS,KAAO2B,IACfpC,EAAQK,MAAQ6D,IAChBlE,EAAQC,QAAUuE,OAItB,WACI,GAAIyH,GAAQC,EAAKC,EAAQjF,OAAOkF,cAAgBlF,OAAOmF,kBACvDJ,GAAS,KACTC,EAAM,GAAIC,GACV/G,EAAW8G,EAAII,iBACfhD,EAAQ,GAAIiD,OACZjD,EAAMkD,IAAM3M,EAAQgK,SACpBP,EAAM1D,UAAW,EACjB0D,EAAM3B,iBAAiB,UAAW,WAC9B,GAAI8E,EASJ,OARApK,SAAQC,IAAI,iBACZ2J,EAASC,EAAIQ,yBAAyBpD,GACtC2C,EAAOU,QAAQvH,GACf6G,EAAOU,QAAQT,EAAIU,aACnBxH,EAASyH,QAA0B,EAAhBhN,EAAQ8B,MAC3B8K,EAAerH,EAAS0H,kBACxBzK,QAAQC,IAAI,eAAgBmK,GAC5B5K,EAAe,GAAIiJ,YAAW2B,KAG3BnD,EAAMyD,UAiFjB,WACIxD,EAAM,GAAIyD,KAAIC,IACd1D,EAAI2D,QAAS,EACb3D,EAAIhJ,IAAIV,EAAS,WAAY,GAAI,KAAKJ,SAASA,GAC/C8J,EAAIhJ,IAAIV,EAAS,gBAAiB,GAAI,KAAKJ,SAASA,GACpD8J,EAAI4D,SAAStN,EAAQC,OAAQ,cAAcL,SAASA,GACpD8J,EAAI4D,SAAStN,EAAQC,OAAQ,SAASL,SAASA,GAE/C8J,EAAIhJ,IAAIV,EAAS,WAAauN,QAAS,EAAGC,MAAO,EAAGC,KAAM,IAAK7N,SAASA,GACxE8J,EAAIhJ,IAAIV,EAAS,gBAlDrBJ,IACA6F","file":"app.min.js","sourcesContent":["/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.config(['$httpProvider', function($httpProvider) {\n        // $httpProvider.defaults.withCredentials = true;\n    }]);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.config(['$locationProvider', function($locationProvider) {\n\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\n        $locationProvider.html5Mode(true);\n        $locationProvider.hashPrefix('');\n\n    }]);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.run(['$rootScope', function($rootScope) {\n\n    }]);\n\n}());\n/* global angular */\n\n(function() {\n    \"use strict\";\n\n    var app = angular.module('app');\n\n    app.controller('RootCtrl', ['$scope', function($scope) {\n        var analyser, analyserData, audio;\n        var stats, gui, scene, camera, controls, fov, ratio, near, far, shadow, back, light, renderer, container, width, height, w2, h2, mouse = { x: 0, y: 0 };\n\n        var OBJECTS = {};\n\n        var options = {\n            audioUrl: \"audio/rossini-192.mp3\",\n            colors: {\n                background: 0x111111, // 0xffffff,\n                lines: 0x999999, // 0x888888,\n                notes: 0x444444, // 0xaaaaaa,\n            },\n            bands: 256,\n            rows: 128,\n            space: 10,\n            strength: 60,\n            noiseStrength: 25,\n            displayLines: true,\n            display: '0',\n            randomize: function() {\n                for (var i = 0; i < gui.__controllers.length; i++) {\n                    var c = gui.__controllers[i];\n                    if (c.__min) {\n                        var value = c.__min + (c.__max - c.__min) * Math.random();\n                        this[c.property] = value;\n                        c.updateDisplay();\n                    }\n                    if (c.__color) {\n                        c.__color.r = Math.floor(Math.random() * 255);\n                        c.__color.g = Math.floor(Math.random() * 255);\n                        c.__color.b = Math.floor(Math.random() * 255);\n                        c.updateDisplay();\n                        c.setValue(c.__color.hex);\n                    }\n                }\n            }\n        };\n\n        options.points = new Array(options.bands * 2).fill(null).map(function() {\n            var r = 1000,\n                d = r * 2;\n            return new THREE.Vector3(-r + Math.random() * d, -r + Math.random() * d, -r + Math.random() * d);\n        });\n        options.noiseMap = getPerlinNoise(options.rows, options.rows);\n\n        function onChange(params) {\n            renderer.setClearColor(options.colors.background, 1);\n            if (OBJECTS.circles) {\n                OBJECTS.circles.material.color.setHex(options.colors.lines);\n                if (options.display === '0') {\n                    OBJECTS.circles.add();\n                } else {\n                    OBJECTS.circles.remove();\n                }\n            }\n            if (OBJECTS.lines) {\n                OBJECTS.lines.material.color.setHex(options.colors.lines);\n                if (options.display === '1') {\n                    OBJECTS.lines.add();\n                } else {\n                    OBJECTS.lines.remove();\n                }\n            }\n            if (OBJECTS.dots) {\n                OBJECTS.dots.material.color.setHex(options.colors.lines);\n                if (options.display === '2') {\n                    OBJECTS.dots.add();\n                } else {\n                    OBJECTS.dots.remove();\n                }\n            }\n        }\n\n        function createLights() {\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.5);\n            shadow = new THREE.DirectionalLight(0xffffff, 0.8);\n            shadow.position.set(200, 200, 200);\n            shadow.castShadow = true;\n            // shadow.shadowDarkness = .2;\n            back = new THREE.DirectionalLight(0xffffff, 0.4);\n            back.position.set(-100, 200, 50);\n            // back.shadowDarkness = .2;\n            back.castShadow = true;\n            scene.add(light);\n            scene.add(shadow);\n            scene.add(back);\n        }\n\n        function createScene() {\n            width = window.innerWidth;\n            height = window.innerHeight;\n            ratio = width / height;\n            w2 = width / 2;\n            h2 = height / 2;\n            fov = 60;\n            near = 1;\n            far = 20000;\n            scene = new THREE.Scene();\n            // scene.fog = new THREE.Fog(0xeeeeee, 256, 500);\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\n            camera.position.z = 100;\n            camera.position.y = -500;\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\n            renderer = new THREE.WebGLRenderer({\n                alpha: true,\n                antialias: true\n            });\n            renderer.setSize(width, height);\n            renderer.setClearColor(options.colors.background, 1);\n            renderer.shadowMap.enabled = true;\n            container = document.getElementById('scene');\n            container.appendChild(renderer.domElement);\n\n            stats = new Stats();\n            container.appendChild(stats.dom);\n\n            addListeners();\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\n        }\n\n        function animateVertexAtIndex(v, i, d) {\n            var rows = options.rows,\n                strength = options.strength,\n                noiseStrength = options.noiseStrength;\n            var r = Math.floor(i / rows);\n            var c = i - r * rows;\n            var b = Math.abs(c - rows / 2) * 2;\n            var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n            var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n            var drc = (dr + dc) / 2;\n            var index = b % options.bands;\n            var pow = analyserData[index];\n            var scale = (pow / options.bands) * dr * 2;\n            var ni = r * rows + ((c + d) % rows);\n            var level = (options.noiseMap[ni] / 64 * noiseStrength) * drc + (strength * scale);\n            v.z += (level - v.z) / (3 + 3 * Math.max(0.000001, 1 - drc));\n        }\n\n        function getObjectDots() {\n            var material = new THREE.PointsMaterial({\n                color: options.colors.lines,\n                size: 1,\n                sizeAttenuation: false,\n                // vertexColors: THREE.VertexColors,\n            });\n            var geometry = new THREE.Geometry();\n            var object = new THREE.Points(geometry, material);\n            var rows = options.rows,\n                space = options.space;\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                return {\n                    x: -(space * rows / 2) + space * c,\n                    y: -(space * rows / 2) + space * r,\n                    z: 0,\n                };\n            });\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var point = points[i];\n                var vertex = new THREE.Vector3();\n                vertex.x = point.x;\n                vertex.y = point.y;\n                vertex.z = point.z;\n                geometry.vertices.push(vertex);\n                // geometry.colors.push(new THREE.Color(0xffcc00));\n                i++;\n            }\n            // geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            object.geometry = geometry;\n\n            function add() {\n                console.log('OBJECTS.dots.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.dots.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                d++;\n                geometry.verticesNeedUpdate = true;\n            }\n\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        function getObjectLines() {\n            var object, material, lines = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            var rows = options.rows,\n                space = options.space;\n            while (lines.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var line = new THREE.Line(geometry, material);\n                line.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // line.spline = spline;\n                lines.push(line);\n                object.add(line);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                var drc = (dr + dc) / 2;\n                var idrc = 1 - drc;\n                var point = new THREE.Vector3(-(space * rows / 2) + space * c, -(space * rows / 2) + space * r,\n                    0\n                );\n                lines[c].points[r] = point;\n                lines[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            function add() {\n                console.log('OBJECTS.lines.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.lines.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    strength = options.strength,\n                    noiseStrength = options.noiseStrength;\n                angular.forEach(points, function(v, i) {\n                    animateVertexAtIndex(v, i, d);\n                });\n                angular.forEach(lines, function(line, l) {\n                    // var points = line.points;\n                    // var spline = line.spline;\n                    // spline.getPoints(rows * 2);\n                    // line.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    line.geometry.verticesNeedUpdate = true;\n                });\n                d++;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        function getObjectCircles() {\n            var object, material, circles = [];\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Object3D();\n            var rows = options.rows,\n                space = options.space;\n            while (circles.length < options.rows) {\n                var geometry = new THREE.Geometry();\n                var circle = new THREE.LineLoop(geometry, material);\n                circle.points = new Array(rows).fill(null);\n                // var spline = new THREE.CatmullRomCurve3(points);\n                // circle.spline = spline;\n                circles.push(circle);\n                object.add(circle);\n            }\n            var points = new Array(rows * rows).fill(null).map(function(n, i) {\n                var point = new THREE.Vector3();\n                var r = Math.floor(i / rows);\n                var c = i - r * rows;\n                circles[c].points[r] = point;\n                circles[c].geometry.vertices.push(point);\n                return point;\n            });\n\n            function add() {\n                console.log('OBJECTS.circles.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.circles.remove');\n                scene.remove(object);\n            }\n\n            var d = 0;\n\n            function update() {\n                var rows = options.rows,\n                    strength = options.strength,\n                    noiseStrength = options.noiseStrength;\n                angular.forEach(points, function(v, i) {\n                    // animateVertexAtIndex(v, i, d);\n                    var r = Math.floor(i / rows);\n                    var c = i - r * rows;\n                    var b = Math.abs(c - rows / 2) * 2;\n                    var dr = 1 - (Math.abs(r - rows / 2) / (rows / 2));\n                    var dc = 1 - (Math.abs(c - rows / 2) / (rows / 2));\n                    var drc = (dr + dc) / 2;\n                    var ai = r % options.bands;\n                    var pow = (analyserData[ai] + analyserData[rows - 1 - ai]) / 2;\n                    var scale = pow / options.bands;\n                    var na = c * rows + ((r + d) % rows);\n                    var noise = options.noiseMap[na];\n                    var level = 96 + c + (noise / 64 * noiseStrength) + (strength * scale);\n                    var angle = 2 * Math.PI / rows * r;\n                    var radius = v.radius || level;\n                    radius += (level - radius) / 2;\n                    v.x = Math.cos(angle) * radius;\n                    v.y = 0;\n                    v.z = Math.sin(angle) * radius;\n                    v.radius = radius;\n                });\n                angular.forEach(circles, function(circle, l) {\n                    // var points = circle.points;\n                    // var spline = circle.spline;\n                    // spline.getPoints(rows * 2);\n                    // circle.geometry.vertices = points;\n                    // geometry.computeLineDistances();\n                    // geometry.lineDistancesNeedUpdate = true;\n                    circle.geometry.verticesNeedUpdate = true;\n                });\n                d++;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n                material: material,\n            };\n        }\n\n        /*\n        function getNotes() {\n            var object, geometry, material;\n            geometry = new THREE.Geometry();\n            texture = new THREE.CanvasTexture(getSprite());\n            material = new THREE.PointsMaterial({\n                size: 12,\n                map: texture,\n                vertexColors: THREE.VertexColors,\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent: true\n            });\n            material = new THREE.PointsMaterial({\n                color: options.colors.notes,\n                size: 2,\n                sizeAttenuation: false,\n            });\n            object = new THREE.Points(geometry, material);\n\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n\n            function add() {\n                console.log('OBJECTS.notes.add');\n                scene.add(object);\n            }\n\n            function remove() {\n                console.log('OBJECTS.notes.remove');\n                scene.remove(object);\n            }\n\n            function update() {\n                angular.forEach(geometry.vertices, function(v, i) {\n                    var index = i % options.bands;\n                    var pow = analyserData[index];\n                    var scale = (pow / options.bands) * 2;\n                    var p = options.points[i];\n                    var vx = p.x * (1 + scale);\n                    var vy = p.y * (1 + scale);\n                    var vz = p.z * (1 + scale);\n                    v.x += (vx - v.x) / 3;\n                    v.y += (vy - v.y) / 3;\n                    v.z += (vz - v.z) / 3;\n                });\n                geometry.verticesNeedUpdate = true;\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n\n        function getLines() {\n            var object, geometry, material;\n\n            geometry = new THREE.Geometry();\n            material = new THREE.LineDashedMaterial({\n                color: options.colors.lines,\n                dashSize: 1,\n                gapSize: 0.5,\n            });\n            material = new THREE.LineBasicMaterial({\n                color: options.colors.lines\n            });\n            object = new THREE.Line(geometry, material);\n\n            function add() {\n                scene.add(object);\n            }\n\n            function remove() {\n                scene.remove(object);\n            }\n\n            function update() {\n\n            }\n            return {\n                add: add,\n                remove: remove,\n                update: update,\n                object: object,\n            };\n\n        }\n        */\n        function createObjects() {\n            OBJECTS.dots = getObjectDots();\n            OBJECTS.lines = getObjectLines();\n            OBJECTS.circles = getObjectCircles();\n            // OBJECTS.notes = getNotes();\n        }\n\n        function createAnalyser() {\n            var source, ctx, actx = (window.AudioContext || window.webkitAudioContext);\n            source = null;\n            ctx = new actx();\n            analyser = ctx.createAnalyser();\n            audio = new Audio();\n            audio.src = options.audioUrl;\n            audio.controls = true;\n            audio.addEventListener('canplay', function() {\n                var bufferLength;\n                console.log('audio canplay');\n                source = ctx.createMediaElementSource(audio);\n                source.connect(analyser);\n                source.connect(ctx.destination);\n                analyser.fftSize = options.bands * 2;\n                bufferLength = analyser.frequencyBinCount;\n                console.log('bufferLength', bufferLength);\n                analyserData = new Uint8Array(bufferLength);\n                return analyserData;\n            });\n            return audio.play();\n        }\n\n        function updateAnalyser() {\n            // notes.rotation.z -= 0.0025;\n            // lines.rotation.z -= 0.0025;            \n            if (analyserData) {\n                analyser.getByteFrequencyData(analyserData);\n                if (options.display === '0') {\n                    OBJECTS.circles.update();\n                } else if (options.display === '1') {\n                    OBJECTS.lines.update();\n                } else if (options.display === '2') {\n                    OBJECTS.dots.update();\n                }\n                // OBJECTS.notes.update();\n            }\n        }\n\n        function loop() {\n            stats.begin();\n            render();\n            stats.end();\n            requestAnimationFrame(loop);\n        }\n\n        function render() {\n            if (controls) {\n                controls.update();\n            }\n            updateAnalyser();\n            renderer.render(scene, camera);\n        }\n\n        createScene();\n        createObjects();\n        // addNotes();\n        createAnalyser();\n        // createLights();\n        addGui();\n        onChange();\n        loop();\n\n        function addNotes() {\n            // alert('onChange', params);\n            /*\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\n            */\n            var geometry = new THREE.Geometry();\n            // geometry.vertices.splice(0, geometry.vertices.length);\n            var points = options.points;\n            var i = 0,\n                t = points.length;\n            while (i < t) {\n                var p = points[i];\n                geometry.vertices.push(new THREE.Vector3(p.x, p.y, p.z));\n                // geometry.colors.push(new THREE.Color(0, 0, 0));\n                i++;\n            }\n            geometry.mergeVertices();\n            geometry.verticesNeedUpdate = true;\n            notes.geometry = geometry;\n            addSplines(points);\n        }\n\n        function addSplines(points) {\n            points = points.map(function(point) {\n                return new THREE.Vector3(point.x, point.y, point.z);\n            });\n            var spline = new THREE.CatmullRomCurve3(points);\n            var geometry = new THREE.Geometry();\n            geometry.vertices = spline.getPoints(5000);\n            // geometry.mergeVertices();\n            // geometry.verticesNeedUpdate = true;\n            // geometry.computeLineDistances();\n            // geometry.lineDistancesNeedUpdate = true;\n            lines.geometry = geometry;\n        }\n\n        function addGui() {\n            gui = new dat.GUI();\n            gui.closed = true;\n            gui.add(options, 'strength', 10, 100).onChange(onChange);\n            gui.add(options, 'noiseStrength', 10, 100).onChange(onChange);\n            gui.addColor(options.colors, 'background').onChange(onChange);\n            gui.addColor(options.colors, 'lines').onChange(onChange);\n            // gui.add(options, 'displayLines').onChange(onChange);\n            gui.add(options, 'display', { Circles: 0, Lines: 1, Dots: 2 }).onChange(onChange);\n            gui.add(options, 'randomize');\n            return gui;\n        }\n\n        function addListeners() {\n            function handleMouseMove(event) {\n                mouse = { x: event.clientX, y: event.clientY };\n            }\n\n            function handleMouseDown(event) {\n                //\n            }\n\n            function handleMouseUp(event) {\n                //\n            }\n\n            function handleTouchStart(event) {\n                if (event.touches.length > 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function handleTouchEnd(event) {\n                mousePos = { x: windowHalfX, y: windowHalfY };\n            }\n\n            function handleTouchMove(event) {\n                if (event.touches.length == 1) {\n                    event.preventDefault();\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\n                }\n            }\n\n            function onWindowResize() {\n                width = window.innerWidth;\n                height = window.innerHeight;\n                w2 = width / 2;\n                h2 = height / 2;\n                renderer.setSize(width, height);\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix();\n            }\n            window.addEventListener('resize', onWindowResize, false);\n            document.addEventListener('mousemove', handleMouseMove, false);\n            document.addEventListener('mousedown', handleMouseDown, false);\n            document.addEventListener('mouseup', handleMouseUp, false);\n            document.addEventListener('touchstart', handleTouchStart, false);\n            document.addEventListener('touchend', handleTouchEnd, false);\n            document.addEventListener('touchmove', handleTouchMove, false);\n        }\n\n        function getSprite() {\n            var canvas = document.createElement('canvas');\n            canvas.width = 128;\n            canvas.height = 128;\n            var ctx = canvas.getContext('2d');\n            var gradient = ctx.createRadialGradient(\n                canvas.width / 2,\n                canvas.height / 2,\n                0,\n                canvas.width / 2,\n                canvas.height / 2,\n                canvas.width / 2\n            );\n            /*\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\n            ctx.fillStyle = gradient;\n            */\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            return canvas;\n        }\n\n        function getPerlinNoise(width, height) {\n            var size = width * height,\n                data = new Uint8Array(size),\n                perlin = new ImprovedNoise(),\n                quality = 1,\n                z = Math.random() * 100;\n            for (var j = 0; j < 4; j++) {\n                for (var i = 0; i < size; i++) {\n                    var x = i % width,\n                        y = ~~(i / width);\n                    data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n                }\n                quality *= 5;\n            }\n            return data;\n        }\n\n        function ImprovedNoise() {\n            var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n                23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n                174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n                133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n                89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n                202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n                248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n                178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n                14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n                93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (var i = 0; i < 256; i++) {\n                p[256 + i] = p[i];\n            }\n\n            function fade(t) {\n                return t * t * t * (t * (t * 6 - 15) + 10);\n            }\n\n            function lerp(t, a, b) {\n                return a + t * (b - a);\n            }\n\n            function grad(hash, x, y, z) {\n                var h = hash & 15;\n                var u = h < 8 ? x : y,\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n                return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n            }\n\n            return {\n                noise: function(x, y, z) {\n                    var floorX = Math.floor(x),\n                        floorY = Math.floor(y),\n                        floorZ = Math.floor(z);\n                    var X = floorX & 255,\n                        Y = floorY & 255,\n                        Z = floorZ & 255;\n                    x -= floorX;\n                    y -= floorY;\n                    z -= floorZ;\n                    var xMinus1 = x - 1,\n                        yMinus1 = y - 1,\n                        zMinus1 = z - 1;\n                    var u = fade(x),\n                        v = fade(y),\n                        w = fade(z);\n                    var A = p[X] + Y,\n                        AA = p[A] + Z,\n                        AB = p[A + 1] + Z,\n                        B = p[X + 1] + Y,\n                        BA = p[B] + Z,\n                        BB = p[B + 1] + Z;\n                    return lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n                                grad(p[BA], xMinus1, y, z)),\n                            lerp(u, grad(p[AB], x, yMinus1, z),\n                                grad(p[BB], xMinus1, yMinus1, z))),\n                        lerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n                                grad(p[BA + 1], xMinus1, y, z - 1)),\n                            lerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n                                grad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n                }\n            };\n        }\n    }]);\n\n}());"]}