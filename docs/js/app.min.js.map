{"version":3,"sources":["docs/js/app.js"],"names":["angular","module","config","$httpProvider","$locationProvider","html5Mode","hashPrefix","run","$rootScope","controller","$scope","addListeners","handleMouseMove","event","mouse","x","clientX","y","clientY","handleMouseDown","handleMouseUp","handleTouchStart","touches","length","preventDefault","mousePos","pageX","pageY","handleTouchEnd","windowHalfX","windowHalfY","handleTouchMove","onWindowResize","width","window","innerWidth","height","innerHeight","w2","h2","renderer","setSize","camera","aspect","updateProjectionMatrix","addEventListener","document","loop","particles","rotation","z","render","requestAnimationFrame","controls","update","scene","sprite","canvas","createElement","ctx","getContext","createRadialGradient","fillStyle","fillRect","addSplines","points","spline","THREE","CatmullRomCurve3","geometry","Geometry","vertices","getPoints","mergeVertices","verticesNeedUpdate","lines","onChange","params","Array","fill","map","Math","random","i","t","point","vertex","Vector3","push","colors","Color","fov","ratio","near","far","container","Scene","PerspectiveCamera","position","lookAt","WebGLRenderer","alpha","antialias","shadowMap","enabled","getElementById","appendChild","domElement","stats","Stats","dom","OrbitControls","texture","material","CanvasTexture","PointsMaterial","size","vertexColors","VertexColors","blending","AdditiveBlending","depthTest","transparent","Points","add","LineDashedMaterial","color","dashSize","gapSize","Line","GalaxyParameters","this","arms","stops","revolutions","radius","sparse","dispersion","bulge","displayOutline","randomize","gui","__controllers","c","__min","value","__max","property","updateDisplay","armTheta","PI","modulus","pow","GPoint","unit","prototype","toGrid","round","toFixed","grid","sort","a","b","dat","GUI","closed"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app', ['ngRoute', 'jsonFormatter']);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$httpProvider', function($httpProvider) {\r\n        // $httpProvider.defaults.withCredentials = true;\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.config(['$locationProvider', function($locationProvider) {\r\n\r\n        // HTML5 MODE url writing method (false: #/anchor/use, true: /html5/url/use)\r\n        $locationProvider.html5Mode(true);\r\n        $locationProvider.hashPrefix('');\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.run(['$rootScope', function($rootScope) {\r\n\r\n    }]);\r\n\r\n}());\n/* global angular */\r\n\r\n(function() {\r\n    \"use strict\";\r\n\r\n    var app = angular.module('app');\r\n\r\n    app.controller('RootCtrl', ['$scope', function($scope) {\r\n\r\n        var scene, camera, controls, fov, ratio, near, far, shadow, back, light, renderer, container, particles, lines, width, height, w2, h2, mouse = { x: 0, y: 0 };\r\n\r\n        function createLights() {\r\n            light = new THREE.HemisphereLight(0xffffff, 0xffffff, .5)\r\n            shadow = new THREE.DirectionalLight(0xffffff, .8);\r\n            shadow.position.set(200, 200, 200);\r\n            shadow.castShadow = true;\r\n            // shadow.shadowDarkness = .2;\r\n            back = new THREE.DirectionalLight(0xffffff, .4);\r\n            back.position.set(-100, 200, 50);\r\n            // back.shadowDarkness = .2;\r\n            back.castShadow = true;\r\n            scene.add(light);\r\n            scene.add(shadow);\r\n            scene.add(back);\r\n        }\r\n\r\n        function createScene() {\r\n            width = window.innerWidth;\r\n            height = window.innerHeight;\r\n            ratio = width / height;\r\n            w2 = width / 2;\r\n            h2 = height / 2;\r\n            fov = 60;\r\n            near = 1;\r\n            far = 20000;\r\n            scene = new THREE.Scene();\r\n            // scene.fog = new THREE.Fog(0x363d3d, -1, 3000 );\r\n            camera = new THREE.PerspectiveCamera(fov, ratio, near, far);\r\n            camera.position.z = 100;\r\n            camera.position.y = -300;\r\n            camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n            renderer = new THREE.WebGLRenderer({\r\n                alpha: true,\r\n                antialias: true\r\n            });\r\n            renderer.setSize(width, height);\r\n            renderer.shadowMap.enabled = true;\r\n            container = document.getElementById('scene');\r\n            container.appendChild(renderer.domElement);\r\n\r\n            var stats = new Stats();\r\n            container.appendChild(stats.dom);\r\n\r\n            addListeners();\r\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n        }\r\n\r\n\r\n        function addListeners() {\r\n            function handleMouseMove(event) {\r\n                mouse = { x: event.clientX, y: event.clientY };\r\n            }\r\n\r\n            function handleMouseDown(event) {\r\n                //\r\n            }\r\n\r\n            function handleMouseUp(event) {\r\n                //\r\n            }\r\n\r\n            function handleTouchStart(event) {\r\n                if (event.touches.length > 1) {\r\n                    event.preventDefault();\r\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\r\n                }\r\n            }\r\n\r\n            function handleTouchEnd(event) {\r\n                mousePos = { x: windowHalfX, y: windowHalfY };\r\n            }\r\n\r\n            function handleTouchMove(event) {\r\n                if (event.touches.length == 1) {\r\n                    event.preventDefault();\r\n                    mousePos = { x: event.touches[0].pageX, y: event.touches[0].pageY };\r\n                }\r\n            }\r\n\r\n            function onWindowResize() {\r\n                width = window.innerWidth;\r\n                height = window.innerHeight;\r\n                w2 = width / 2;\r\n                h2 = height / 2;\r\n                renderer.setSize(width, height);\r\n                camera.aspect = width / height;\r\n                camera.updateProjectionMatrix();\r\n            }\r\n            window.addEventListener('resize', onWindowResize, false);\r\n            document.addEventListener('mousemove', handleMouseMove, false);\r\n            document.addEventListener('mousedown', handleMouseDown, false);\r\n            document.addEventListener('mouseup', handleMouseUp, false);\r\n            document.addEventListener('touchstart', handleTouchStart, false);\r\n            document.addEventListener('touchend', handleTouchEnd, false);\r\n            document.addEventListener('touchmove', handleTouchMove, false);\r\n        }\r\n\r\n        function loop() {\r\n            particles.rotation.z -= 0.0025;\r\n            render();\r\n            requestAnimationFrame(loop);\r\n        }\r\n\r\n        function render() {\r\n            if (controls) {\r\n                controls.update();\r\n            }\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        function sprite() {\r\n            var canvas = document.createElement('canvas');\r\n            canvas.width = 128;\r\n            canvas.height = 128;\r\n            var ctx = canvas.getContext('2d');\r\n            var gradient = ctx.createRadialGradient(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                0,\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                canvas.width / 2\r\n            );\r\n            /*\r\n            gradient.addColorStop(0, 'rgba(0,0,0,1)');\r\n            gradient.addColorStop(0.2, 'rgba(0,0,0,1)');\r\n            gradient.addColorStop(0.22, 'rgba(0,0,0,.2)');\r\n            gradient.addColorStop(1, 'rgba(0,0,0,0)');\r\n            ctx.fillStyle = gradient;\r\n            */\r\n            ctx.fillStyle = \"#000000\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n            return canvas;\r\n        }\r\n\r\n        function bufferGeometry() {\r\n            var geometry = new THREE.BufferGeometry();\r\n            // create a simple square shape. We duplicate the top left and bottom right\r\n            // vertices because each vertex needs to appear once per triangle.\r\n            var vertices = new Float32Array([-1.0, -1.0, 1.0,\r\n                1.0, -1.0, 1.0,\r\n                1.0, 1.0, 1.0,\r\n                1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0\r\n            ]);\r\n            // itemSize = 3 because there are 3 values (components) per vertex\r\n            geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\r\n        }\r\n\r\n        function createObjects() {\r\n            var texture, geometry, material;\r\n            // PARTICLES\r\n            texture = new THREE.CanvasTexture(sprite());\r\n            geometry = new THREE.Geometry();\r\n            material = new THREE.PointsMaterial({\r\n                size: 12,\r\n                map: texture,\r\n                vertexColors: THREE.VertexColors,\r\n                blending: THREE.AdditiveBlending,\r\n                depthTest: false,\r\n                transparent: true\r\n            });\r\n            particles = new THREE.Points(geometry, material);\r\n            scene.add(particles);\r\n            // LINES\r\n            geometry = new THREE.Geometry();\r\n            material = new THREE.LineDashedMaterial({\r\n                color: 0x000000,\r\n                dashSize: 1,\r\n                gapSize: 0.5,\r\n            });\r\n            lines = new THREE.Line(geometry, material);\r\n            scene.add(lines);\r\n        }\r\n\r\n        createScene();\r\n        createObjects();\r\n        // createLights();\r\n        loop();\r\n\r\n        var params = function GalaxyParameters() {\r\n            function GalaxyParameters() {\r\n                this.arms = 2,\r\n                    this.stops = 5000,\r\n                    this.revolutions = 1.7,\r\n                    this.radius = 400,\r\n                    this.sparse = 0.4,\r\n                    this.dispersion = 0.6, // more 0 - less 1\r\n                    this.bulge = 0.6,\r\n                    this.displayOutline = false,\r\n                    this.randomize = function() {\r\n                        // console.log('gui', gui);\r\n                        for (var i = 0; i < gui.__controllers.length; i++) {\r\n                            var c = gui.__controllers[i];\r\n                            if (c.__min) {\r\n                                var value = c.__min + (c.__max - c.__min) * Math.random();\r\n                                // console.log(value, c);\r\n                                this[c.property] = value;\r\n                                c.updateDisplay();\r\n                            }\r\n                        }\r\n                        onChange(this);\r\n                    },\r\n                    this.armTheta = function() {\r\n                        return Math.PI * 2 / this.arms;\r\n                    };\r\n                this.modulus = function() {\r\n                    return Math.pow(2, 31);\r\n                };\r\n            }\r\n            return new GalaxyParameters();\r\n        }();\r\n\r\n        var GPoint = function() {\r\n            var unit = {\r\n                x: 0.09,\r\n                y: 0.09,\r\n                z: 0.3\r\n            };\r\n\r\n            function GPoint(x, y, z) {\r\n                this.x = x || 0;\r\n                this.y = y || 0;\r\n                this.z = z || 0;\r\n            }\r\n            GPoint.prototype = {\r\n                randomize: function() {\r\n                    this.x = Math.random() * 1000;\r\n                    this.y = Math.random() * 1000;\r\n                    this.z = Math.random() * 1000;\r\n                    return this;\r\n                },\r\n                toGrid: function() {\r\n                    this.x = (Math.round(this.x / unit.x) * unit.x);\r\n                    this.y = (Math.round(this.y / unit.y) * unit.y);\r\n                    this.z = (Math.round(this.z / unit.z) * unit.z);\r\n                    return this;\r\n                },\r\n                toFixed: function() {\r\n                    this.x = +(this.x.toFixed(2));\r\n                    this.y = +(this.y.toFixed(2));\r\n                    this.z = +(this.z.toFixed(2));\r\n                    return this;\r\n                },\r\n            };\r\n            GPoint.grid = function(points) {\r\n                for (var i = 0; i < points.length; i++) {\r\n                    points[i].toGrid().toFixed();\r\n                }\r\n                GPoint.sort(points);\r\n            };\r\n            GPoint.sort = function(points) {\r\n                points.sort(function(a, b) {\r\n                    if (a.z === b.z) {\r\n                        if (a.x === b.x) {\r\n                            if (a.y === b.y) {\r\n                                return 0;\r\n                            } else {\r\n                                return a.y > b.y ? 1 : -1;\r\n                            }\r\n                        } else {\r\n                            return a.x > b.x ? 1 : -1;\r\n                        }\r\n                    } else {\r\n                        return a.z > b.z ? 1 : -1;\r\n                    }\r\n                });\r\n            };\r\n            return GPoint;\r\n        }();\r\n\r\n        function lcg(value, modulus, multiplier, increment) {\r\n            modulus = modulus || Math.pow(2, 31);\r\n            multiplier = multiplier || 1103515245;\r\n            increment = increment || 12345;\r\n            return (value * multiplier + increment) % modulus;\r\n        }\r\n\r\n        function spiral(params) {\r\n            return {\r\n                toArray: function(now) {\r\n                    now = now || 0;\r\n                    var time = now / -60000,\r\n                        modulus = params.modulus(),\r\n                        theta = params.armTheta();\r\n                    var points = [];\r\n                    var value = 0;\r\n                    for (var arm = 0; arm < params.arms; arm++) {\r\n                        for (var stop = 0; stop < params.stops; stop++) {\r\n                            value = lcg(value, modulus);\r\n                            var pow = (stop / params.stops),\r\n                                c = 1 - pow + 1 - params.dispersion,\r\n                                r = value / modulus,\r\n                                cr = (r - 0.5) * 2,\r\n                                angle = (pow * Math.PI * 2 * params.revolutions) + (theta * arm),\r\n                                radians = time + angle + (Math.PI * c * cr * params.sparse),\r\n                                distance = Math.sqrt(pow) * params.radius,\r\n                                x = Math.cos(radians) * distance,\r\n                                y = Math.sin(radians) * distance,\r\n                                z = 0,\r\n                                size = (r - 0.5) * 2 + Math.pow(1.125, (1 - pow) * 8),\r\n                                alpha = (Math.sin((r + time + pow) * Math.PI * 2) + 1) * 0.5;\r\n                            points.push({\r\n                                x: x,\r\n                                y: y,\r\n                                z: z,\r\n                                size: size,\r\n                                alpha: alpha,\r\n                            });\r\n                        }\r\n                    }\r\n                    return points;\r\n                },\r\n            };\r\n        }\r\n\r\n        function addSplines(points) {\r\n            var subdivisions = 6;\r\n            var recursion = 1;\r\n            var spline = new THREE.CatmullRomCurve3(points);\r\n            var geometry = new THREE.Geometry();\r\n            /*\r\n            var i = 0,\r\n                t = points.length * subdivisions;\r\n            while (i < t) {\r\n                var index = i / (points.length * subdivisions);\r\n                var p = spline.getPoint(index);\r\n                geometry.vertices[i] = new THREE.Vector3(p.x, p.y, p.z);\r\n                i++;\r\n            }\r\n            */\r\n            geometry.vertices = spline.getPoints(500);\r\n            // geometry.computeLineDistances();\r\n            geometry.mergeVertices();\r\n            geometry.verticesNeedUpdate = true;\r\n            lines.geometry = geometry;\r\n        }\r\n\r\n        function onChange(params) {\r\n            // alert('onChange', params);\r\n            /*\r\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\r\n            */\r\n            var geometry = new THREE.Geometry();\r\n            // geometry.vertices.splice(0, geometry.vertices.length);\r\n            var points = new Array(250).fill(null).map(function() {\r\n                return {\r\n                    x: -500 + Math.random() * 1000,\r\n                    y: -500 + Math.random() * 1000,\r\n                    z: -500 + Math.random() * 1000,\r\n                };\r\n            });\r\n            var i = 0,\r\n                t = points.length;\r\n            while (i < t) {\r\n                var point = points[i];\r\n                var vertex = new THREE.Vector3();\r\n                vertex.x = point.x;\r\n                vertex.y = point.y;\r\n                vertex.z = point.z;\r\n                geometry.vertices.push(vertex);\r\n                geometry.colors.push(new THREE.Color(0, 0, 0));\r\n                i++;\r\n            }\r\n            geometry.mergeVertices();\r\n            geometry.verticesNeedUpdate = true;\r\n            particles.geometry = geometry;\r\n            addSplines(points);\r\n        }\r\n\r\n        function __onChange(params) {\r\n            // alert('onChange', data);\r\n            var dx = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dy = 10 - 10 * params.dispersion * (1 - params.bulge);\r\n            var dz = 40 - 40 * params.dispersion * (1 - params.bulge);\r\n            // var geometry = particles.geometry;\r\n            var geometry = new THREE.Geometry();\r\n            // geometry.vertices.splice(0, geometry.vertices.length);\r\n            var points = spiral(params).toArray();\r\n            for (var i = 0; i < points.length; i++) {\r\n                var point = points[i];\r\n                var distance = Math.pow(Math.pow(point.x, 2) + Math.pow(point.y, 2), 0.5);\r\n                var pow = Math.max(0, ((params.radius * .8) - distance) / (params.radius * .8));\r\n                pow = (1 - Math.cos(pow * Math.PI)) * params.bulge;\r\n                // console.log(distance);\r\n                var vertex = new THREE.Vector3();\r\n                vertex.x = point.x;\r\n                vertex.y = point.y;\r\n                vertex.z = (-dz + (dz * 2) * Math.random()) * pow; // (Math.random() * 180 - 90) * (pow * pow * pow);\r\n                geometry.vertices.push(vertex);\r\n                geometry.colors.push(new THREE.Color(pow, pow, 1));\r\n                var t = Math.round(pow * 5),\r\n                    n = 0;\r\n                while (n < t) {\r\n                    vertex = new THREE.Vector3();\r\n                    vertex.x = point.x - dx + Math.random() * (dx * 2);\r\n                    vertex.y = point.y - dy + Math.random() * (dy * 2);\r\n                    vertex.z = (-dz + (dz * 2) * Math.random()) * pow;\r\n                    geometry.vertices.push(vertex);\r\n                    geometry.colors.push(new THREE.Color(pow, pow, pow));\r\n                    n++;\r\n                }\r\n            }\r\n            geometry.mergeVertices();\r\n            geometry.verticesNeedUpdate = true;\r\n            particles.geometry = geometry;\r\n        }\r\n\r\n        var gui = function datgui() {\r\n            var gui = new dat.GUI();\r\n            gui.closed = true;\r\n            /*\r\n            gui.add(params, 'arms', 1, 10).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'stops', 1000, 10000).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'revolutions', 1.1, 3.1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'radius', 300, 1000).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'sparse', 0.1, 1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'dispersion', 0.01, 1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'bulge', 0.01, 1).onChange(function(newValue) {\r\n                onChange(params);\r\n            });\r\n            gui.add(params, 'randomize');\r\n            */\r\n            return gui;\r\n        }();\r\n\r\n        onChange(params);\r\n\r\n        /*\r\n\r\n        var downloadFile = (function() {\r\n            var a = document.createElement(\"a\");\r\n            document.body.appendChild(a);\r\n            a.style = \"display: none\";\r\n            return function(data, fileName, json) {\r\n                data = json ? JSON.stringify(data) : data;\r\n                var blob = new Blob([data], { type: \"octet/stream\" }),\r\n                    url = window.URL.createObjectURL(blob);\r\n                a.href = url;\r\n                a.download = fileName;\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n            };\r\n        }());\r\n\r\n        function string2ArrayBuffer(string, callback) {\r\n            var blob = new Blob([string])\r\n            var fr = new FileReader();\r\n            fr.onload = function(e) {\r\n                callback(e.target.result);\r\n            }\r\n            fr.readAsArrayBuffer(blob);\r\n        }\r\n\r\n        function PCDExporter(vertices) {\r\n            var data = '# .PCD v.7 - Point Cloud Data file format' + '\\r\\n';\r\n            data += 'VERSION .7' + '\\r\\n';\r\n            data += 'FIELDS x y z rgb' + '\\r\\n';\r\n            data += 'SIZE 4 4 4 4' + '\\r\\n';\r\n            data += 'TYPE F F F F' + '\\r\\n';\r\n            data += 'COUNT 1 1 1 1' + '\\r\\n';\r\n            data += 'WIDTH ' + vertices.length + '\\r\\n';\r\n            data += 'HEIGHT 1' + '\\r\\n';\r\n            data += 'VIEWPOINT 0 0 0 1 0 0 0' + '\\r\\n';\r\n            data += 'POINTS ' + vertices.length + '\\r\\n';\r\n            data += 'DATA ascii' + '\\r\\n';\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var v = vertices[i];\r\n                var x = v.x.toFixed(5);\r\n                var y = v.y.toFixed(5);\r\n                var z = v.z.toFixed(5);\r\n                data += x + ' ' + y + ' ' + z + ' 4.2108e+06';\r\n                if (i < vertices.length - 1) {\r\n                    data += '\\r\\n';\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        // https://cdn.rawgit.com/mikolalysenko/write-ply/master/write-ply.js\r\n        function PLYExporter(vertices) {\r\n            var model = {\r\n                vertex: {\r\n                    x: [],\r\n                    y: [],\r\n                    z: []\r\n                },\r\n                face: {\r\n                    vertex_index: []\r\n                }\r\n            };\r\n            for (var i = 0; i < vertices.length; i++) {\r\n                var v = vertices[i];\r\n                model.vertex.x.push(v.x);\r\n                model.vertex.y.push(v.y);\r\n                model.vertex.z.push(v.z);\r\n            }\r\n            var data = writePLY(model);\r\n            return data;\r\n        }\r\n        */\r\n\r\n    }]);\r\n\r\n}());"]}